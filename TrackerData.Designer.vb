'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("TrackerData"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class TrackerData
    Inherits Global.System.Data.DataSet
    
    Private tabletodo_by_type_counts_vw As todo_by_type_counts_vwDataTable
    
    Private tableStudies As StudiesDataTable
    
    Private tableStatuses As StatusesDataTable
    
    Private tableRecruitStatuses As RecruitStatusesDataTable
    
    Private tableContactTypes As ContactTypesDataTable
    
    Private tableRecruitContacts As RecruitContactsDataTable
    
    Private tablePhoneNumberTypes As PhoneNumberTypesDataTable
    
    Private tablePhoneNumbers As PhoneNumbersDataTable
    
    Private tableAddresses As AddressesDataTable
    
    Private tableRecruits As RecruitsDataTable
    
    Private tableSamplingProgramVersions As SamplingProgramVersionsDataTable
    
    Private tableContactsOverview As ContactsOverviewDataTable
    
    Private tableQueriedAccessCodeList As QueriedAccessCodeListDataTable
    
    Private tableFullNames As FullNamesDataTable
    
    Private tableUpdatedAddresses As UpdatedAddressesDataTable
    
    Private tableTickler As TicklerDataTable
    
    Private tableincentive_card_counts_vw As incentive_card_counts_vwDataTable
    
    Private relationStatus_History As Global.System.Data.DataRelation
    
    Private relationStatusesRecruitStatuses As Global.System.Data.DataRelation
    
    Private relationContacts As Global.System.Data.DataRelation
    
    Private relationContactTypesRecruitContacts As Global.System.Data.DataRelation
    
    Private relationPhone_Numbers As Global.System.Data.DataRelation
    
    Private relationPhoneNumberTypesPhoneNumbers As Global.System.Data.DataRelation
    
    Private relationAddresses As Global.System.Data.DataRelation
    
    Private relationSamplingProgramVersionsRecruits As Global.System.Data.DataRelation
    
    Private relationParticipants As Global.System.Data.DataRelation
    
    Private relationUpdated_addresses As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("todo_by_type_counts_vw")) Is Nothing) Then
                MyBase.Tables.Add(New todo_by_type_counts_vwDataTable(ds.Tables("todo_by_type_counts_vw")))
            End If
            If (Not (ds.Tables("Studies")) Is Nothing) Then
                MyBase.Tables.Add(New StudiesDataTable(ds.Tables("Studies")))
            End If
            If (Not (ds.Tables("Statuses")) Is Nothing) Then
                MyBase.Tables.Add(New StatusesDataTable(ds.Tables("Statuses")))
            End If
            If (Not (ds.Tables("RecruitStatuses")) Is Nothing) Then
                MyBase.Tables.Add(New RecruitStatusesDataTable(ds.Tables("RecruitStatuses")))
            End If
            If (Not (ds.Tables("ContactTypes")) Is Nothing) Then
                MyBase.Tables.Add(New ContactTypesDataTable(ds.Tables("ContactTypes")))
            End If
            If (Not (ds.Tables("RecruitContacts")) Is Nothing) Then
                MyBase.Tables.Add(New RecruitContactsDataTable(ds.Tables("RecruitContacts")))
            End If
            If (Not (ds.Tables("PhoneNumberTypes")) Is Nothing) Then
                MyBase.Tables.Add(New PhoneNumberTypesDataTable(ds.Tables("PhoneNumberTypes")))
            End If
            If (Not (ds.Tables("PhoneNumbers")) Is Nothing) Then
                MyBase.Tables.Add(New PhoneNumbersDataTable(ds.Tables("PhoneNumbers")))
            End If
            If (Not (ds.Tables("Addresses")) Is Nothing) Then
                MyBase.Tables.Add(New AddressesDataTable(ds.Tables("Addresses")))
            End If
            If (Not (ds.Tables("Recruits")) Is Nothing) Then
                MyBase.Tables.Add(New RecruitsDataTable(ds.Tables("Recruits")))
            End If
            If (Not (ds.Tables("SamplingProgramVersions")) Is Nothing) Then
                MyBase.Tables.Add(New SamplingProgramVersionsDataTable(ds.Tables("SamplingProgramVersions")))
            End If
            If (Not (ds.Tables("ContactsOverview")) Is Nothing) Then
                MyBase.Tables.Add(New ContactsOverviewDataTable(ds.Tables("ContactsOverview")))
            End If
            If (Not (ds.Tables("QueriedAccessCodeList")) Is Nothing) Then
                MyBase.Tables.Add(New QueriedAccessCodeListDataTable(ds.Tables("QueriedAccessCodeList")))
            End If
            If (Not (ds.Tables("FullNames")) Is Nothing) Then
                MyBase.Tables.Add(New FullNamesDataTable(ds.Tables("FullNames")))
            End If
            If (Not (ds.Tables("UpdatedAddresses")) Is Nothing) Then
                MyBase.Tables.Add(New UpdatedAddressesDataTable(ds.Tables("UpdatedAddresses")))
            End If
            If (Not (ds.Tables("Tickler")) Is Nothing) Then
                MyBase.Tables.Add(New TicklerDataTable(ds.Tables("Tickler")))
            End If
            If (Not (ds.Tables("incentive_card_counts_vw")) Is Nothing) Then
                MyBase.Tables.Add(New incentive_card_counts_vwDataTable(ds.Tables("incentive_card_counts_vw")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            Me.InitExpressions
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property todo_by_type_counts_vw() As todo_by_type_counts_vwDataTable
        Get
            Return Me.tabletodo_by_type_counts_vw
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Studies() As StudiesDataTable
        Get
            Return Me.tableStudies
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Statuses() As StatusesDataTable
        Get
            Return Me.tableStatuses
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RecruitStatuses() As RecruitStatusesDataTable
        Get
            Return Me.tableRecruitStatuses
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ContactTypes() As ContactTypesDataTable
        Get
            Return Me.tableContactTypes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RecruitContacts() As RecruitContactsDataTable
        Get
            Return Me.tableRecruitContacts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PhoneNumberTypes() As PhoneNumberTypesDataTable
        Get
            Return Me.tablePhoneNumberTypes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PhoneNumbers() As PhoneNumbersDataTable
        Get
            Return Me.tablePhoneNumbers
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Addresses() As AddressesDataTable
        Get
            Return Me.tableAddresses
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Recruits() As RecruitsDataTable
        Get
            Return Me.tableRecruits
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SamplingProgramVersions() As SamplingProgramVersionsDataTable
        Get
            Return Me.tableSamplingProgramVersions
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ContactsOverview() As ContactsOverviewDataTable
        Get
            Return Me.tableContactsOverview
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property QueriedAccessCodeList() As QueriedAccessCodeListDataTable
        Get
            Return Me.tableQueriedAccessCodeList
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FullNames() As FullNamesDataTable
        Get
            Return Me.tableFullNames
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UpdatedAddresses() As UpdatedAddressesDataTable
        Get
            Return Me.tableUpdatedAddresses
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tickler() As TicklerDataTable
        Get
            Return Me.tableTickler
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property incentive_card_counts_vw() As incentive_card_counts_vwDataTable
        Get
            Return Me.tableincentive_card_counts_vw
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As TrackerData = CType(MyBase.Clone,TrackerData)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("todo_by_type_counts_vw")) Is Nothing) Then
                MyBase.Tables.Add(New todo_by_type_counts_vwDataTable(ds.Tables("todo_by_type_counts_vw")))
            End If
            If (Not (ds.Tables("Studies")) Is Nothing) Then
                MyBase.Tables.Add(New StudiesDataTable(ds.Tables("Studies")))
            End If
            If (Not (ds.Tables("Statuses")) Is Nothing) Then
                MyBase.Tables.Add(New StatusesDataTable(ds.Tables("Statuses")))
            End If
            If (Not (ds.Tables("RecruitStatuses")) Is Nothing) Then
                MyBase.Tables.Add(New RecruitStatusesDataTable(ds.Tables("RecruitStatuses")))
            End If
            If (Not (ds.Tables("ContactTypes")) Is Nothing) Then
                MyBase.Tables.Add(New ContactTypesDataTable(ds.Tables("ContactTypes")))
            End If
            If (Not (ds.Tables("RecruitContacts")) Is Nothing) Then
                MyBase.Tables.Add(New RecruitContactsDataTable(ds.Tables("RecruitContacts")))
            End If
            If (Not (ds.Tables("PhoneNumberTypes")) Is Nothing) Then
                MyBase.Tables.Add(New PhoneNumberTypesDataTable(ds.Tables("PhoneNumberTypes")))
            End If
            If (Not (ds.Tables("PhoneNumbers")) Is Nothing) Then
                MyBase.Tables.Add(New PhoneNumbersDataTable(ds.Tables("PhoneNumbers")))
            End If
            If (Not (ds.Tables("Addresses")) Is Nothing) Then
                MyBase.Tables.Add(New AddressesDataTable(ds.Tables("Addresses")))
            End If
            If (Not (ds.Tables("Recruits")) Is Nothing) Then
                MyBase.Tables.Add(New RecruitsDataTable(ds.Tables("Recruits")))
            End If
            If (Not (ds.Tables("SamplingProgramVersions")) Is Nothing) Then
                MyBase.Tables.Add(New SamplingProgramVersionsDataTable(ds.Tables("SamplingProgramVersions")))
            End If
            If (Not (ds.Tables("ContactsOverview")) Is Nothing) Then
                MyBase.Tables.Add(New ContactsOverviewDataTable(ds.Tables("ContactsOverview")))
            End If
            If (Not (ds.Tables("QueriedAccessCodeList")) Is Nothing) Then
                MyBase.Tables.Add(New QueriedAccessCodeListDataTable(ds.Tables("QueriedAccessCodeList")))
            End If
            If (Not (ds.Tables("FullNames")) Is Nothing) Then
                MyBase.Tables.Add(New FullNamesDataTable(ds.Tables("FullNames")))
            End If
            If (Not (ds.Tables("UpdatedAddresses")) Is Nothing) Then
                MyBase.Tables.Add(New UpdatedAddressesDataTable(ds.Tables("UpdatedAddresses")))
            End If
            If (Not (ds.Tables("Tickler")) Is Nothing) Then
                MyBase.Tables.Add(New TicklerDataTable(ds.Tables("Tickler")))
            End If
            If (Not (ds.Tables("incentive_card_counts_vw")) Is Nothing) Then
                MyBase.Tables.Add(New incentive_card_counts_vwDataTable(ds.Tables("incentive_card_counts_vw")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletodo_by_type_counts_vw = CType(MyBase.Tables("todo_by_type_counts_vw"),todo_by_type_counts_vwDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletodo_by_type_counts_vw) Is Nothing) Then
                Me.tabletodo_by_type_counts_vw.InitVars
            End If
        End If
        Me.tableStudies = CType(MyBase.Tables("Studies"),StudiesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStudies) Is Nothing) Then
                Me.tableStudies.InitVars
            End If
        End If
        Me.tableStatuses = CType(MyBase.Tables("Statuses"),StatusesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableStatuses) Is Nothing) Then
                Me.tableStatuses.InitVars
            End If
        End If
        Me.tableRecruitStatuses = CType(MyBase.Tables("RecruitStatuses"),RecruitStatusesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRecruitStatuses) Is Nothing) Then
                Me.tableRecruitStatuses.InitVars
            End If
        End If
        Me.tableContactTypes = CType(MyBase.Tables("ContactTypes"),ContactTypesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableContactTypes) Is Nothing) Then
                Me.tableContactTypes.InitVars
            End If
        End If
        Me.tableRecruitContacts = CType(MyBase.Tables("RecruitContacts"),RecruitContactsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRecruitContacts) Is Nothing) Then
                Me.tableRecruitContacts.InitVars
            End If
        End If
        Me.tablePhoneNumberTypes = CType(MyBase.Tables("PhoneNumberTypes"),PhoneNumberTypesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePhoneNumberTypes) Is Nothing) Then
                Me.tablePhoneNumberTypes.InitVars
            End If
        End If
        Me.tablePhoneNumbers = CType(MyBase.Tables("PhoneNumbers"),PhoneNumbersDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePhoneNumbers) Is Nothing) Then
                Me.tablePhoneNumbers.InitVars
            End If
        End If
        Me.tableAddresses = CType(MyBase.Tables("Addresses"),AddressesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAddresses) Is Nothing) Then
                Me.tableAddresses.InitVars
            End If
        End If
        Me.tableRecruits = CType(MyBase.Tables("Recruits"),RecruitsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRecruits) Is Nothing) Then
                Me.tableRecruits.InitVars
            End If
        End If
        Me.tableSamplingProgramVersions = CType(MyBase.Tables("SamplingProgramVersions"),SamplingProgramVersionsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSamplingProgramVersions) Is Nothing) Then
                Me.tableSamplingProgramVersions.InitVars
            End If
        End If
        Me.tableContactsOverview = CType(MyBase.Tables("ContactsOverview"),ContactsOverviewDataTable)
        If (initTable = true) Then
            If (Not (Me.tableContactsOverview) Is Nothing) Then
                Me.tableContactsOverview.InitVars
            End If
        End If
        Me.tableQueriedAccessCodeList = CType(MyBase.Tables("QueriedAccessCodeList"),QueriedAccessCodeListDataTable)
        If (initTable = true) Then
            If (Not (Me.tableQueriedAccessCodeList) Is Nothing) Then
                Me.tableQueriedAccessCodeList.InitVars
            End If
        End If
        Me.tableFullNames = CType(MyBase.Tables("FullNames"),FullNamesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFullNames) Is Nothing) Then
                Me.tableFullNames.InitVars
            End If
        End If
        Me.tableUpdatedAddresses = CType(MyBase.Tables("UpdatedAddresses"),UpdatedAddressesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUpdatedAddresses) Is Nothing) Then
                Me.tableUpdatedAddresses.InitVars
            End If
        End If
        Me.tableTickler = CType(MyBase.Tables("Tickler"),TicklerDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTickler) Is Nothing) Then
                Me.tableTickler.InitVars
            End If
        End If
        Me.tableincentive_card_counts_vw = CType(MyBase.Tables("incentive_card_counts_vw"),incentive_card_counts_vwDataTable)
        If (initTable = true) Then
            If (Not (Me.tableincentive_card_counts_vw) Is Nothing) Then
                Me.tableincentive_card_counts_vw.InitVars
            End If
        End If
        Me.relationStatus_History = Me.Relations("Status History")
        Me.relationStatusesRecruitStatuses = Me.Relations("StatusesRecruitStatuses")
        Me.relationContacts = Me.Relations("Contacts")
        Me.relationContactTypesRecruitContacts = Me.Relations("ContactTypesRecruitContacts")
        Me.relationPhone_Numbers = Me.Relations("Phone Numbers")
        Me.relationPhoneNumberTypesPhoneNumbers = Me.Relations("PhoneNumberTypesPhoneNumbers")
        Me.relationAddresses = Me.Relations("Addresses")
        Me.relationSamplingProgramVersionsRecruits = Me.Relations("SamplingProgramVersionsRecruits")
        Me.relationParticipants = Me.Relations("Participants")
        Me.relationUpdated_addresses = Me.Relations("Updated addresses")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "TrackerData"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Recruits.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletodo_by_type_counts_vw = New todo_by_type_counts_vwDataTable
        MyBase.Tables.Add(Me.tabletodo_by_type_counts_vw)
        Me.tableStudies = New StudiesDataTable
        MyBase.Tables.Add(Me.tableStudies)
        Me.tableStatuses = New StatusesDataTable
        MyBase.Tables.Add(Me.tableStatuses)
        Me.tableRecruitStatuses = New RecruitStatusesDataTable
        MyBase.Tables.Add(Me.tableRecruitStatuses)
        Me.tableContactTypes = New ContactTypesDataTable
        MyBase.Tables.Add(Me.tableContactTypes)
        Me.tableRecruitContacts = New RecruitContactsDataTable
        MyBase.Tables.Add(Me.tableRecruitContacts)
        Me.tablePhoneNumberTypes = New PhoneNumberTypesDataTable
        MyBase.Tables.Add(Me.tablePhoneNumberTypes)
        Me.tablePhoneNumbers = New PhoneNumbersDataTable
        MyBase.Tables.Add(Me.tablePhoneNumbers)
        Me.tableAddresses = New AddressesDataTable
        MyBase.Tables.Add(Me.tableAddresses)
        Me.tableRecruits = New RecruitsDataTable(false)
        MyBase.Tables.Add(Me.tableRecruits)
        Me.tableSamplingProgramVersions = New SamplingProgramVersionsDataTable
        MyBase.Tables.Add(Me.tableSamplingProgramVersions)
        Me.tableContactsOverview = New ContactsOverviewDataTable
        MyBase.Tables.Add(Me.tableContactsOverview)
        Me.tableQueriedAccessCodeList = New QueriedAccessCodeListDataTable
        MyBase.Tables.Add(Me.tableQueriedAccessCodeList)
        Me.tableFullNames = New FullNamesDataTable
        MyBase.Tables.Add(Me.tableFullNames)
        Me.tableUpdatedAddresses = New UpdatedAddressesDataTable
        MyBase.Tables.Add(Me.tableUpdatedAddresses)
        Me.tableTickler = New TicklerDataTable
        MyBase.Tables.Add(Me.tableTickler)
        Me.tableincentive_card_counts_vw = New incentive_card_counts_vwDataTable
        MyBase.Tables.Add(Me.tableincentive_card_counts_vw)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("Status History", New Global.System.Data.DataColumn() {Me.tableRecruits.RecruitIDColumn}, New Global.System.Data.DataColumn() {Me.tableRecruitStatuses.RecruitIDColumn})
        Me.tableRecruitStatuses.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("StatusesRecruitStatuses", New Global.System.Data.DataColumn() {Me.tableStatuses.StatusColumn}, New Global.System.Data.DataColumn() {Me.tableRecruitStatuses.StatusColumn})
        Me.tableRecruitStatuses.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("Contacts", New Global.System.Data.DataColumn() {Me.tableRecruits.RecruitIDColumn}, New Global.System.Data.DataColumn() {Me.tableRecruitContacts.RecruitIDColumn})
        Me.tableRecruitContacts.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("ContactTypesRecruitContacts", New Global.System.Data.DataColumn() {Me.tableContactTypes.ContactTypeColumn}, New Global.System.Data.DataColumn() {Me.tableRecruitContacts.ContactTypeColumn})
        Me.tableRecruitContacts.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("Phone Numbers", New Global.System.Data.DataColumn() {Me.tableRecruits.RecruitIDColumn}, New Global.System.Data.DataColumn() {Me.tablePhoneNumbers.RecruitIDColumn})
        Me.tablePhoneNumbers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("PhoneNumberTypesPhoneNumbers", New Global.System.Data.DataColumn() {Me.tablePhoneNumberTypes.TypeColumn}, New Global.System.Data.DataColumn() {Me.tablePhoneNumbers.TypeColumn})
        Me.tablePhoneNumbers.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("Addresses", New Global.System.Data.DataColumn() {Me.tableRecruits.RecruitIDColumn}, New Global.System.Data.DataColumn() {Me.tableAddresses.RecruitIDColumn})
        Me.tableAddresses.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("SamplingProgramVersionsRecruits", New Global.System.Data.DataColumn() {Me.tableSamplingProgramVersions.RecruitProgVersionColumn}, New Global.System.Data.DataColumn() {Me.tableRecruits.RecruitProgVersionColumn})
        Me.tableRecruits.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("Participants", New Global.System.Data.DataColumn() {Me.tableStudies.StudyColumn}, New Global.System.Data.DataColumn() {Me.tableRecruits.StudyColumn})
        Me.tableRecruits.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("Updated addresses", New Global.System.Data.DataColumn() {Me.tableRecruits.RecruitIDColumn}, New Global.System.Data.DataColumn() {Me.tableUpdatedAddresses.RecruitIDColumn})
        Me.tableUpdatedAddresses.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationStatus_History = New Global.System.Data.DataRelation("Status History", New Global.System.Data.DataColumn() {Me.tableRecruits.RecruitIDColumn}, New Global.System.Data.DataColumn() {Me.tableRecruitStatuses.RecruitIDColumn}, false)
        Me.Relations.Add(Me.relationStatus_History)
        Me.relationStatusesRecruitStatuses = New Global.System.Data.DataRelation("StatusesRecruitStatuses", New Global.System.Data.DataColumn() {Me.tableStatuses.StatusColumn}, New Global.System.Data.DataColumn() {Me.tableRecruitStatuses.StatusColumn}, false)
        Me.Relations.Add(Me.relationStatusesRecruitStatuses)
        Me.relationContacts = New Global.System.Data.DataRelation("Contacts", New Global.System.Data.DataColumn() {Me.tableRecruits.RecruitIDColumn}, New Global.System.Data.DataColumn() {Me.tableRecruitContacts.RecruitIDColumn}, false)
        Me.Relations.Add(Me.relationContacts)
        Me.relationContactTypesRecruitContacts = New Global.System.Data.DataRelation("ContactTypesRecruitContacts", New Global.System.Data.DataColumn() {Me.tableContactTypes.ContactTypeColumn}, New Global.System.Data.DataColumn() {Me.tableRecruitContacts.ContactTypeColumn}, false)
        Me.Relations.Add(Me.relationContactTypesRecruitContacts)
        Me.relationPhone_Numbers = New Global.System.Data.DataRelation("Phone Numbers", New Global.System.Data.DataColumn() {Me.tableRecruits.RecruitIDColumn}, New Global.System.Data.DataColumn() {Me.tablePhoneNumbers.RecruitIDColumn}, false)
        Me.Relations.Add(Me.relationPhone_Numbers)
        Me.relationPhoneNumberTypesPhoneNumbers = New Global.System.Data.DataRelation("PhoneNumberTypesPhoneNumbers", New Global.System.Data.DataColumn() {Me.tablePhoneNumberTypes.TypeColumn}, New Global.System.Data.DataColumn() {Me.tablePhoneNumbers.TypeColumn}, false)
        Me.Relations.Add(Me.relationPhoneNumberTypesPhoneNumbers)
        Me.relationAddresses = New Global.System.Data.DataRelation("Addresses", New Global.System.Data.DataColumn() {Me.tableRecruits.RecruitIDColumn}, New Global.System.Data.DataColumn() {Me.tableAddresses.RecruitIDColumn}, false)
        Me.Relations.Add(Me.relationAddresses)
        Me.relationSamplingProgramVersionsRecruits = New Global.System.Data.DataRelation("SamplingProgramVersionsRecruits", New Global.System.Data.DataColumn() {Me.tableSamplingProgramVersions.RecruitProgVersionColumn}, New Global.System.Data.DataColumn() {Me.tableRecruits.RecruitProgVersionColumn}, false)
        Me.Relations.Add(Me.relationSamplingProgramVersionsRecruits)
        Me.relationParticipants = New Global.System.Data.DataRelation("Participants", New Global.System.Data.DataColumn() {Me.tableStudies.StudyColumn}, New Global.System.Data.DataColumn() {Me.tableRecruits.StudyColumn}, false)
        Me.Relations.Add(Me.relationParticipants)
        Me.relationUpdated_addresses = New Global.System.Data.DataRelation("Updated addresses", New Global.System.Data.DataColumn() {Me.tableRecruits.RecruitIDColumn}, New Global.System.Data.DataColumn() {Me.tableUpdatedAddresses.RecruitIDColumn}, false)
        Me.Relations.Add(Me.relationUpdated_addresses)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetodo_by_type_counts_vw() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStudies() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeStatuses() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRecruitStatuses() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeContactTypes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRecruitContacts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePhoneNumberTypes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePhoneNumbers() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAddresses() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRecruits() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSamplingProgramVersions() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeContactsOverview() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeQueriedAccessCodeList() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFullNames() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUpdatedAddresses() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTickler() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeincentive_card_counts_vw() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As TrackerData = New TrackerData
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitExpressions()
        Me.Recruits.FullNameColumn.Expression = "LastName + ', ' + FirstName"
    End Sub
    
    Public Delegate Sub todo_by_type_counts_vwRowChangeEventHandler(ByVal sender As Object, ByVal e As todo_by_type_counts_vwRowChangeEvent)
    
    Public Delegate Sub StudiesRowChangeEventHandler(ByVal sender As Object, ByVal e As StudiesRowChangeEvent)
    
    Public Delegate Sub StatusesRowChangeEventHandler(ByVal sender As Object, ByVal e As StatusesRowChangeEvent)
    
    Public Delegate Sub RecruitStatusesRowChangeEventHandler(ByVal sender As Object, ByVal e As RecruitStatusesRowChangeEvent)
    
    Public Delegate Sub ContactTypesRowChangeEventHandler(ByVal sender As Object, ByVal e As ContactTypesRowChangeEvent)
    
    Public Delegate Sub RecruitContactsRowChangeEventHandler(ByVal sender As Object, ByVal e As RecruitContactsRowChangeEvent)
    
    Public Delegate Sub PhoneNumberTypesRowChangeEventHandler(ByVal sender As Object, ByVal e As PhoneNumberTypesRowChangeEvent)
    
    Public Delegate Sub PhoneNumbersRowChangeEventHandler(ByVal sender As Object, ByVal e As PhoneNumbersRowChangeEvent)
    
    Public Delegate Sub AddressesRowChangeEventHandler(ByVal sender As Object, ByVal e As AddressesRowChangeEvent)
    
    Public Delegate Sub RecruitsRowChangeEventHandler(ByVal sender As Object, ByVal e As RecruitsRowChangeEvent)
    
    Public Delegate Sub SamplingProgramVersionsRowChangeEventHandler(ByVal sender As Object, ByVal e As SamplingProgramVersionsRowChangeEvent)
    
    Public Delegate Sub ContactsOverviewRowChangeEventHandler(ByVal sender As Object, ByVal e As ContactsOverviewRowChangeEvent)
    
    Public Delegate Sub QueriedAccessCodeListRowChangeEventHandler(ByVal sender As Object, ByVal e As QueriedAccessCodeListRowChangeEvent)
    
    Public Delegate Sub FullNamesRowChangeEventHandler(ByVal sender As Object, ByVal e As FullNamesRowChangeEvent)
    
    Public Delegate Sub UpdatedAddressesRowChangeEventHandler(ByVal sender As Object, ByVal e As UpdatedAddressesRowChangeEvent)
    
    Public Delegate Sub TicklerRowChangeEventHandler(ByVal sender As Object, ByVal e As TicklerRowChangeEvent)
    
    Public Delegate Sub incentive_card_counts_vwRowChangeEventHandler(ByVal sender As Object, ByVal e As incentive_card_counts_vwRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class todo_by_type_counts_vwDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columntobedone As Global.System.Data.DataColumn
        
        Private columnnum As Global.System.Data.DataColumn
        
        Private columnWanted As Global.System.Data.DataColumn
        
        Private columnpersontype As Global.System.Data.DataColumn
        
        Private columnstudy As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "todo_by_type_counts_vw"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tobedoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntobedone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WantedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWanted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property persontypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpersontype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property studyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstudy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As todo_by_type_counts_vwRow
            Get
                Return CType(Me.Rows(index),todo_by_type_counts_vwRow)
            End Get
        End Property
        
        Public Event todo_by_type_counts_vwRowChanging As todo_by_type_counts_vwRowChangeEventHandler
        
        Public Event todo_by_type_counts_vwRowChanged As todo_by_type_counts_vwRowChangeEventHandler
        
        Public Event todo_by_type_counts_vwRowDeleting As todo_by_type_counts_vwRowChangeEventHandler
        
        Public Event todo_by_type_counts_vwRowDeleted As todo_by_type_counts_vwRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addtodo_by_type_counts_vwRow(ByVal row As todo_by_type_counts_vwRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addtodo_by_type_counts_vwRow(ByVal tobedone As String, ByVal num As Integer, ByVal Wanted As Integer, ByVal persontype As String, ByVal study As Integer) As todo_by_type_counts_vwRow
            Dim rowtodo_by_type_counts_vwRow As todo_by_type_counts_vwRow = CType(Me.NewRow,todo_by_type_counts_vwRow)
            Dim columnValuesArray() As Object = New Object() {tobedone, num, Wanted, persontype, study}
            rowtodo_by_type_counts_vwRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtodo_by_type_counts_vwRow)
            Return rowtodo_by_type_counts_vwRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As todo_by_type_counts_vwDataTable = CType(MyBase.Clone,todo_by_type_counts_vwDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New todo_by_type_counts_vwDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntobedone = MyBase.Columns("tobedone")
            Me.columnnum = MyBase.Columns("num")
            Me.columnWanted = MyBase.Columns("Wanted")
            Me.columnpersontype = MyBase.Columns("persontype")
            Me.columnstudy = MyBase.Columns("study")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntobedone = New Global.System.Data.DataColumn("tobedone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntobedone)
            Me.columnnum = New Global.System.Data.DataColumn("num", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnum)
            Me.columnWanted = New Global.System.Data.DataColumn("Wanted", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWanted)
            Me.columnpersontype = New Global.System.Data.DataColumn("persontype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpersontype)
            Me.columnstudy = New Global.System.Data.DataColumn("study", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstudy)
            Me.columntobedone.AllowDBNull = false
            Me.columntobedone.MaxLength = 200
            Me.columnnum.Caption = "Available"
            Me.columnWanted.AllowDBNull = false
            Me.columnWanted.DefaultValue = CType(0,Integer)
            Me.columnpersontype.ReadOnly = true
            Me.columnpersontype.MaxLength = 10
            Me.columnstudy.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newtodo_by_type_counts_vwRow() As todo_by_type_counts_vwRow
            Return CType(Me.NewRow,todo_by_type_counts_vwRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New todo_by_type_counts_vwRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(todo_by_type_counts_vwRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.todo_by_type_counts_vwRowChangedEvent) Is Nothing) Then
                RaiseEvent todo_by_type_counts_vwRowChanged(Me, New todo_by_type_counts_vwRowChangeEvent(CType(e.Row,todo_by_type_counts_vwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.todo_by_type_counts_vwRowChangingEvent) Is Nothing) Then
                RaiseEvent todo_by_type_counts_vwRowChanging(Me, New todo_by_type_counts_vwRowChangeEvent(CType(e.Row,todo_by_type_counts_vwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.todo_by_type_counts_vwRowDeletedEvent) Is Nothing) Then
                RaiseEvent todo_by_type_counts_vwRowDeleted(Me, New todo_by_type_counts_vwRowChangeEvent(CType(e.Row,todo_by_type_counts_vwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.todo_by_type_counts_vwRowDeletingEvent) Is Nothing) Then
                RaiseEvent todo_by_type_counts_vwRowDeleting(Me, New todo_by_type_counts_vwRowChangeEvent(CType(e.Row,todo_by_type_counts_vwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removetodo_by_type_counts_vwRow(ByVal row As todo_by_type_counts_vwRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "todo_by_type_counts_vwDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StudiesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnStudy As Global.System.Data.DataColumn
        
        Private columnStudyName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Studies"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudyNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudyName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StudiesRow
            Get
                Return CType(Me.Rows(index),StudiesRow)
            End Get
        End Property
        
        Public Event StudiesRowChanging As StudiesRowChangeEventHandler
        
        Public Event StudiesRowChanged As StudiesRowChangeEventHandler
        
        Public Event StudiesRowDeleting As StudiesRowChangeEventHandler
        
        Public Event StudiesRowDeleted As StudiesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStudiesRow(ByVal row As StudiesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStudiesRow(ByVal StudyName As String) As StudiesRow
            Dim rowStudiesRow As StudiesRow = CType(Me.NewRow,StudiesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StudyName}
            rowStudiesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStudiesRow)
            Return rowStudiesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStudy(ByVal Study As Integer) As StudiesRow
            Return CType(Me.Rows.Find(New Object() {Study}),StudiesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StudiesDataTable = CType(MyBase.Clone,StudiesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StudiesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStudy = MyBase.Columns("Study")
            Me.columnStudyName = MyBase.Columns("StudyName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStudy = New Global.System.Data.DataColumn("Study", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudy)
            Me.columnStudyName = New Global.System.Data.DataColumn("StudyName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudyName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("CHCRKey1", New Global.System.Data.DataColumn() {Me.columnStudy}, true))
            Me.columnStudy.AutoIncrement = true
            Me.columnStudy.AllowDBNull = false
            Me.columnStudy.ReadOnly = true
            Me.columnStudy.Unique = true
            Me.columnStudyName.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStudiesRow() As StudiesRow
            Return CType(Me.NewRow,StudiesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StudiesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StudiesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StudiesRowChangedEvent) Is Nothing) Then
                RaiseEvent StudiesRowChanged(Me, New StudiesRowChangeEvent(CType(e.Row,StudiesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StudiesRowChangingEvent) Is Nothing) Then
                RaiseEvent StudiesRowChanging(Me, New StudiesRowChangeEvent(CType(e.Row,StudiesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StudiesRowDeletedEvent) Is Nothing) Then
                RaiseEvent StudiesRowDeleted(Me, New StudiesRowChangeEvent(CType(e.Row,StudiesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StudiesRowDeletingEvent) Is Nothing) Then
                RaiseEvent StudiesRowDeleting(Me, New StudiesRowChangeEvent(CType(e.Row,StudiesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStudiesRow(ByVal row As StudiesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StudiesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class StatusesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnStudy As Global.System.Data.DataColumn
        
        Private columnStatusDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Statuses"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As StatusesRow
            Get
                Return CType(Me.Rows(index),StatusesRow)
            End Get
        End Property
        
        Public Event StatusesRowChanging As StatusesRowChangeEventHandler
        
        Public Event StatusesRowChanged As StatusesRowChangeEventHandler
        
        Public Event StatusesRowDeleting As StatusesRowChangeEventHandler
        
        Public Event StatusesRowDeleted As StatusesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddStatusesRow(ByVal row As StatusesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddStatusesRow(ByVal Study As Integer, ByVal StatusDescription As String) As StatusesRow
            Dim rowStatusesRow As StatusesRow = CType(Me.NewRow,StatusesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Study, StatusDescription}
            rowStatusesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowStatusesRow)
            Return rowStatusesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByStatus(ByVal Status As Integer) As StatusesRow
            Return CType(Me.Rows.Find(New Object() {Status}),StatusesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As StatusesDataTable = CType(MyBase.Clone,StatusesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New StatusesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnStudy = MyBase.Columns("Study")
            Me.columnStatusDescription = MyBase.Columns("StatusDescription")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnStudy = New Global.System.Data.DataColumn("Study", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudy)
            Me.columnStatusDescription = New Global.System.Data.DataColumn("StatusDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusDescription)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("CHCRKey2", New Global.System.Data.DataColumn() {Me.columnStatus}, true))
            Me.columnStatus.AutoIncrement = true
            Me.columnStatus.AllowDBNull = false
            Me.columnStatus.ReadOnly = true
            Me.columnStatus.Unique = true
            Me.columnStudy.AllowDBNull = false
            Me.columnStatusDescription.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewStatusesRow() As StatusesRow
            Return CType(Me.NewRow,StatusesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New StatusesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(StatusesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.StatusesRowChangedEvent) Is Nothing) Then
                RaiseEvent StatusesRowChanged(Me, New StatusesRowChangeEvent(CType(e.Row,StatusesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.StatusesRowChangingEvent) Is Nothing) Then
                RaiseEvent StatusesRowChanging(Me, New StatusesRowChangeEvent(CType(e.Row,StatusesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.StatusesRowDeletedEvent) Is Nothing) Then
                RaiseEvent StatusesRowDeleted(Me, New StatusesRowChangeEvent(CType(e.Row,StatusesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.StatusesRowDeletingEvent) Is Nothing) Then
                RaiseEvent StatusesRowDeleting(Me, New StatusesRowChangeEvent(CType(e.Row,StatusesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveStatusesRow(ByVal row As StatusesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "StatusesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RecruitStatusesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRecruitID As Global.System.Data.DataColumn
        
        Private columnStatusDate As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnAddedDate As Global.System.Data.DataColumn
        
        Private columnModifiedBy As Global.System.Data.DataColumn
        
        Private columnModifiedDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RecruitStatuses"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecruitIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecruitID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RecruitStatusesRow
            Get
                Return CType(Me.Rows(index),RecruitStatusesRow)
            End Get
        End Property
        
        Public Event RecruitStatusesRowChanging As RecruitStatusesRowChangeEventHandler
        
        Public Event RecruitStatusesRowChanged As RecruitStatusesRowChangeEventHandler
        
        Public Event RecruitStatusesRowDeleting As RecruitStatusesRowChangeEventHandler
        
        Public Event RecruitStatusesRowDeleted As RecruitStatusesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRecruitStatusesRow(ByVal row As RecruitStatusesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRecruitStatusesRow(ByVal parentRecruitsRowByStatus_History As RecruitsRow, ByVal StatusDate As Date, ByVal parentStatusesRowByStatusesRecruitStatuses As StatusesRow, ByVal AddedBy As String, ByVal AddedDate As Date, ByVal ModifiedBy As String, ByVal ModifiedDate As Date) As RecruitStatusesRow
            Dim rowRecruitStatusesRow As RecruitStatusesRow = CType(Me.NewRow,RecruitStatusesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StatusDate, Nothing, AddedBy, AddedDate, ModifiedBy, ModifiedDate}
            If (Not (parentRecruitsRowByStatus_History) Is Nothing) Then
                columnValuesArray(0) = parentRecruitsRowByStatus_History(0)
            End If
            If (Not (parentStatusesRowByStatusesRecruitStatuses) Is Nothing) Then
                columnValuesArray(2) = parentStatusesRowByStatusesRecruitStatuses(0)
            End If
            rowRecruitStatusesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRecruitStatusesRow)
            Return rowRecruitStatusesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRecruitIDStatusDateStatus(ByVal RecruitID As Integer, ByVal StatusDate As Date, ByVal Status As Integer) As RecruitStatusesRow
            Return CType(Me.Rows.Find(New Object() {RecruitID, StatusDate, Status}),RecruitStatusesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RecruitStatusesDataTable = CType(MyBase.Clone,RecruitStatusesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RecruitStatusesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRecruitID = MyBase.Columns("RecruitID")
            Me.columnStatusDate = MyBase.Columns("StatusDate")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnAddedDate = MyBase.Columns("AddedDate")
            Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            Me.columnModifiedDate = MyBase.Columns("ModifiedDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRecruitID = New Global.System.Data.DataColumn("RecruitID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecruitID)
            Me.columnStatusDate = New Global.System.Data.DataColumn("StatusDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusDate)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnAddedDate = New Global.System.Data.DataColumn("AddedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedDate)
            Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedBy)
            Me.columnModifiedDate = New Global.System.Data.DataColumn("ModifiedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("RecruitStatusesKey1", New Global.System.Data.DataColumn() {Me.columnRecruitID, Me.columnStatusDate, Me.columnStatus}, true))
            Me.columnRecruitID.AllowDBNull = false
            Me.columnStatusDate.AllowDBNull = false
            Me.columnStatus.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRecruitStatusesRow() As RecruitStatusesRow
            Return CType(Me.NewRow,RecruitStatusesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RecruitStatusesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RecruitStatusesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RecruitStatusesRowChangedEvent) Is Nothing) Then
                RaiseEvent RecruitStatusesRowChanged(Me, New RecruitStatusesRowChangeEvent(CType(e.Row,RecruitStatusesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RecruitStatusesRowChangingEvent) Is Nothing) Then
                RaiseEvent RecruitStatusesRowChanging(Me, New RecruitStatusesRowChangeEvent(CType(e.Row,RecruitStatusesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RecruitStatusesRowDeletedEvent) Is Nothing) Then
                RaiseEvent RecruitStatusesRowDeleted(Me, New RecruitStatusesRowChangeEvent(CType(e.Row,RecruitStatusesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RecruitStatusesRowDeletingEvent) Is Nothing) Then
                RaiseEvent RecruitStatusesRowDeleting(Me, New RecruitStatusesRowChangeEvent(CType(e.Row,RecruitStatusesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRecruitStatusesRow(ByVal row As RecruitStatusesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RecruitStatusesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ContactTypesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnContactType As Global.System.Data.DataColumn
        
        Private columnContactTypeDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ContactTypes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactTypeDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactTypeDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ContactTypesRow
            Get
                Return CType(Me.Rows(index),ContactTypesRow)
            End Get
        End Property
        
        Public Event ContactTypesRowChanging As ContactTypesRowChangeEventHandler
        
        Public Event ContactTypesRowChanged As ContactTypesRowChangeEventHandler
        
        Public Event ContactTypesRowDeleting As ContactTypesRowChangeEventHandler
        
        Public Event ContactTypesRowDeleted As ContactTypesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddContactTypesRow(ByVal row As ContactTypesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddContactTypesRow(ByVal ContactTypeDescription As String) As ContactTypesRow
            Dim rowContactTypesRow As ContactTypesRow = CType(Me.NewRow,ContactTypesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ContactTypeDescription}
            rowContactTypesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowContactTypesRow)
            Return rowContactTypesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByContactType(ByVal ContactType As Integer) As ContactTypesRow
            Return CType(Me.Rows.Find(New Object() {ContactType}),ContactTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ContactTypesDataTable = CType(MyBase.Clone,ContactTypesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ContactTypesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnContactType = MyBase.Columns("ContactType")
            Me.columnContactTypeDescription = MyBase.Columns("ContactTypeDescription")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnContactType = New Global.System.Data.DataColumn("ContactType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactType)
            Me.columnContactTypeDescription = New Global.System.Data.DataColumn("ContactTypeDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactTypeDescription)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("CHCRKey4", New Global.System.Data.DataColumn() {Me.columnContactType}, true))
            Me.columnContactType.AutoIncrement = true
            Me.columnContactType.AllowDBNull = false
            Me.columnContactType.ReadOnly = true
            Me.columnContactType.Unique = true
            Me.columnContactTypeDescription.AllowDBNull = false
            Me.columnContactTypeDescription.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewContactTypesRow() As ContactTypesRow
            Return CType(Me.NewRow,ContactTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ContactTypesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ContactTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ContactTypesRowChangedEvent) Is Nothing) Then
                RaiseEvent ContactTypesRowChanged(Me, New ContactTypesRowChangeEvent(CType(e.Row,ContactTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ContactTypesRowChangingEvent) Is Nothing) Then
                RaiseEvent ContactTypesRowChanging(Me, New ContactTypesRowChangeEvent(CType(e.Row,ContactTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ContactTypesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ContactTypesRowDeleted(Me, New ContactTypesRowChangeEvent(CType(e.Row,ContactTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ContactTypesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ContactTypesRowDeleting(Me, New ContactTypesRowChangeEvent(CType(e.Row,ContactTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveContactTypesRow(ByVal row As ContactTypesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ContactTypesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RecruitContactsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRecruitID As Global.System.Data.DataColumn
        
        Private columnContactDate As Global.System.Data.DataColumn
        
        Private columnInitiator As Global.System.Data.DataColumn
        
        Private columnResult As Global.System.Data.DataColumn
        
        Private columnNotes As Global.System.Data.DataColumn
        
        Private columnContactType As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnAddedDate As Global.System.Data.DataColumn
        
        Private columnModifiedBy As Global.System.Data.DataColumn
        
        Private columnModifiedDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RecruitContacts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecruitIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecruitID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InitiatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInitiator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResultColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResult
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RecruitContactsRow
            Get
                Return CType(Me.Rows(index),RecruitContactsRow)
            End Get
        End Property
        
        Public Event RecruitContactsRowChanging As RecruitContactsRowChangeEventHandler
        
        Public Event RecruitContactsRowChanged As RecruitContactsRowChangeEventHandler
        
        Public Event RecruitContactsRowDeleting As RecruitContactsRowChangeEventHandler
        
        Public Event RecruitContactsRowDeleted As RecruitContactsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRecruitContactsRow(ByVal row As RecruitContactsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRecruitContactsRow(ByVal parentRecruitsRowByContacts As RecruitsRow, ByVal ContactDate As Date, ByVal Initiator As String, ByVal Result As String, ByVal Notes As String, ByVal parentContactTypesRowByContactTypesRecruitContacts As ContactTypesRow, ByVal AddedBy As String, ByVal AddedDate As Date, ByVal ModifiedBy As String, ByVal ModifiedDate As Date) As RecruitContactsRow
            Dim rowRecruitContactsRow As RecruitContactsRow = CType(Me.NewRow,RecruitContactsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ContactDate, Initiator, Result, Notes, Nothing, AddedBy, AddedDate, ModifiedBy, ModifiedDate}
            If (Not (parentRecruitsRowByContacts) Is Nothing) Then
                columnValuesArray(0) = parentRecruitsRowByContacts(0)
            End If
            If (Not (parentContactTypesRowByContactTypesRecruitContacts) Is Nothing) Then
                columnValuesArray(5) = parentContactTypesRowByContactTypesRecruitContacts(0)
            End If
            rowRecruitContactsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRecruitContactsRow)
            Return rowRecruitContactsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRecruitIDContactDate(ByVal RecruitID As Integer, ByVal ContactDate As Date) As RecruitContactsRow
            Return CType(Me.Rows.Find(New Object() {RecruitID, ContactDate}),RecruitContactsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RecruitContactsDataTable = CType(MyBase.Clone,RecruitContactsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RecruitContactsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRecruitID = MyBase.Columns("RecruitID")
            Me.columnContactDate = MyBase.Columns("ContactDate")
            Me.columnInitiator = MyBase.Columns("Initiator")
            Me.columnResult = MyBase.Columns("Result")
            Me.columnNotes = MyBase.Columns("Notes")
            Me.columnContactType = MyBase.Columns("ContactType")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnAddedDate = MyBase.Columns("AddedDate")
            Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            Me.columnModifiedDate = MyBase.Columns("ModifiedDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRecruitID = New Global.System.Data.DataColumn("RecruitID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecruitID)
            Me.columnContactDate = New Global.System.Data.DataColumn("ContactDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactDate)
            Me.columnInitiator = New Global.System.Data.DataColumn("Initiator", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInitiator)
            Me.columnResult = New Global.System.Data.DataColumn("Result", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResult)
            Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotes)
            Me.columnContactType = New Global.System.Data.DataColumn("ContactType", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactType)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnAddedDate = New Global.System.Data.DataColumn("AddedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedDate)
            Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedBy)
            Me.columnModifiedDate = New Global.System.Data.DataColumn("ModifiedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("CHCRKey5", New Global.System.Data.DataColumn() {Me.columnRecruitID, Me.columnContactDate}, true))
            Me.columnRecruitID.AllowDBNull = false
            Me.columnRecruitID.ReadOnly = true
            Me.columnContactDate.AllowDBNull = false
            Me.columnInitiator.AllowDBNull = false
            Me.columnContactType.AllowDBNull = false
            Me.columnAddedBy.ReadOnly = true
            Me.columnAddedDate.ReadOnly = true
            Me.columnModifiedBy.ReadOnly = true
            Me.columnModifiedDate.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRecruitContactsRow() As RecruitContactsRow
            Return CType(Me.NewRow,RecruitContactsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RecruitContactsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RecruitContactsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RecruitContactsRowChangedEvent) Is Nothing) Then
                RaiseEvent RecruitContactsRowChanged(Me, New RecruitContactsRowChangeEvent(CType(e.Row,RecruitContactsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RecruitContactsRowChangingEvent) Is Nothing) Then
                RaiseEvent RecruitContactsRowChanging(Me, New RecruitContactsRowChangeEvent(CType(e.Row,RecruitContactsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RecruitContactsRowDeletedEvent) Is Nothing) Then
                RaiseEvent RecruitContactsRowDeleted(Me, New RecruitContactsRowChangeEvent(CType(e.Row,RecruitContactsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RecruitContactsRowDeletingEvent) Is Nothing) Then
                RaiseEvent RecruitContactsRowDeleting(Me, New RecruitContactsRowChangeEvent(CType(e.Row,RecruitContactsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRecruitContactsRow(ByVal row As RecruitContactsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RecruitContactsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PhoneNumberTypesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PhoneNumberTypes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PhoneNumberTypesRow
            Get
                Return CType(Me.Rows(index),PhoneNumberTypesRow)
            End Get
        End Property
        
        Public Event PhoneNumberTypesRowChanging As PhoneNumberTypesRowChangeEventHandler
        
        Public Event PhoneNumberTypesRowChanged As PhoneNumberTypesRowChangeEventHandler
        
        Public Event PhoneNumberTypesRowDeleting As PhoneNumberTypesRowChangeEventHandler
        
        Public Event PhoneNumberTypesRowDeleted As PhoneNumberTypesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPhoneNumberTypesRow(ByVal row As PhoneNumberTypesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPhoneNumberTypesRow(ByVal Type As String) As PhoneNumberTypesRow
            Dim rowPhoneNumberTypesRow As PhoneNumberTypesRow = CType(Me.NewRow,PhoneNumberTypesRow)
            Dim columnValuesArray() As Object = New Object() {Type}
            rowPhoneNumberTypesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPhoneNumberTypesRow)
            Return rowPhoneNumberTypesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByType(ByVal Type As String) As PhoneNumberTypesRow
            Return CType(Me.Rows.Find(New Object() {Type}),PhoneNumberTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PhoneNumberTypesDataTable = CType(MyBase.Clone,PhoneNumberTypesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PhoneNumberTypesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnType = MyBase.Columns("Type")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("CHCRKey6", New Global.System.Data.DataColumn() {Me.columnType}, true))
            Me.columnType.AllowDBNull = false
            Me.columnType.ReadOnly = true
            Me.columnType.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPhoneNumberTypesRow() As PhoneNumberTypesRow
            Return CType(Me.NewRow,PhoneNumberTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PhoneNumberTypesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PhoneNumberTypesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PhoneNumberTypesRowChangedEvent) Is Nothing) Then
                RaiseEvent PhoneNumberTypesRowChanged(Me, New PhoneNumberTypesRowChangeEvent(CType(e.Row,PhoneNumberTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PhoneNumberTypesRowChangingEvent) Is Nothing) Then
                RaiseEvent PhoneNumberTypesRowChanging(Me, New PhoneNumberTypesRowChangeEvent(CType(e.Row,PhoneNumberTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PhoneNumberTypesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PhoneNumberTypesRowDeleted(Me, New PhoneNumberTypesRowChangeEvent(CType(e.Row,PhoneNumberTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PhoneNumberTypesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PhoneNumberTypesRowDeleting(Me, New PhoneNumberTypesRowChangeEvent(CType(e.Row,PhoneNumberTypesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePhoneNumberTypesRow(ByVal row As PhoneNumberTypesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PhoneNumberTypesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PhoneNumbersDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRecruitID As Global.System.Data.DataColumn
        
        Private columnAreaCode As Global.System.Data.DataColumn
        
        Private columnPhoneNumber As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnSource As Global.System.Data.DataColumn
        
        Private columnExtension As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnAddedDate As Global.System.Data.DataColumn
        
        Private columnModifiedBy As Global.System.Data.DataColumn
        
        Private columnModifiedDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PhoneNumbers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecruitIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecruitID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AreaCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAreaCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhoneNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhoneNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExtensionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExtension
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PhoneNumbersRow
            Get
                Return CType(Me.Rows(index),PhoneNumbersRow)
            End Get
        End Property
        
        Public Event PhoneNumbersRowChanging As PhoneNumbersRowChangeEventHandler
        
        Public Event PhoneNumbersRowChanged As PhoneNumbersRowChangeEventHandler
        
        Public Event PhoneNumbersRowDeleting As PhoneNumbersRowChangeEventHandler
        
        Public Event PhoneNumbersRowDeleted As PhoneNumbersRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPhoneNumbersRow(ByVal row As PhoneNumbersRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPhoneNumbersRow(ByVal parentRecruitsRowByPhone_Numbers As RecruitsRow, ByVal AreaCode As String, ByVal PhoneNumber As String, ByVal parentPhoneNumberTypesRowByPhoneNumberTypesPhoneNumbers As PhoneNumberTypesRow, ByVal Source As String, ByVal Extension As String, ByVal AddedBy As String, ByVal AddedDate As Date, ByVal ModifiedBy As String, ByVal ModifiedDate As Date) As PhoneNumbersRow
            Dim rowPhoneNumbersRow As PhoneNumbersRow = CType(Me.NewRow,PhoneNumbersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, AreaCode, PhoneNumber, Nothing, Source, Extension, AddedBy, AddedDate, ModifiedBy, ModifiedDate}
            If (Not (parentRecruitsRowByPhone_Numbers) Is Nothing) Then
                columnValuesArray(0) = parentRecruitsRowByPhone_Numbers(0)
            End If
            If (Not (parentPhoneNumberTypesRowByPhoneNumberTypesPhoneNumbers) Is Nothing) Then
                columnValuesArray(3) = parentPhoneNumberTypesRowByPhoneNumberTypesPhoneNumbers(0)
            End If
            rowPhoneNumbersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPhoneNumbersRow)
            Return rowPhoneNumbersRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRecruitIDAreaCodePhoneNumber(ByVal RecruitID As Integer, ByVal AreaCode As String, ByVal PhoneNumber As String) As PhoneNumbersRow
            Return CType(Me.Rows.Find(New Object() {RecruitID, AreaCode, PhoneNumber}),PhoneNumbersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PhoneNumbersDataTable = CType(MyBase.Clone,PhoneNumbersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PhoneNumbersDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRecruitID = MyBase.Columns("RecruitID")
            Me.columnAreaCode = MyBase.Columns("AreaCode")
            Me.columnPhoneNumber = MyBase.Columns("PhoneNumber")
            Me.columnType = MyBase.Columns("Type")
            Me.columnSource = MyBase.Columns("Source")
            Me.columnExtension = MyBase.Columns("Extension")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnAddedDate = MyBase.Columns("AddedDate")
            Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            Me.columnModifiedDate = MyBase.Columns("ModifiedDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRecruitID = New Global.System.Data.DataColumn("RecruitID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecruitID)
            Me.columnAreaCode = New Global.System.Data.DataColumn("AreaCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAreaCode)
            Me.columnPhoneNumber = New Global.System.Data.DataColumn("PhoneNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhoneNumber)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnSource = New Global.System.Data.DataColumn("Source", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSource)
            Me.columnExtension = New Global.System.Data.DataColumn("Extension", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExtension)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnAddedDate = New Global.System.Data.DataColumn("AddedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedDate)
            Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedBy)
            Me.columnModifiedDate = New Global.System.Data.DataColumn("ModifiedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("CHCRKey7", New Global.System.Data.DataColumn() {Me.columnRecruitID, Me.columnAreaCode, Me.columnPhoneNumber}, true))
            Me.columnRecruitID.AllowDBNull = false
            Me.columnAreaCode.AllowDBNull = false
            Me.columnPhoneNumber.AllowDBNull = false
            Me.columnType.AllowDBNull = false
            Me.columnSource.AllowDBNull = false
            Me.columnAddedBy.ReadOnly = true
            Me.columnAddedDate.ReadOnly = true
            Me.columnModifiedBy.ReadOnly = true
            Me.columnModifiedDate.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPhoneNumbersRow() As PhoneNumbersRow
            Return CType(Me.NewRow,PhoneNumbersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PhoneNumbersRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PhoneNumbersRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PhoneNumbersRowChangedEvent) Is Nothing) Then
                RaiseEvent PhoneNumbersRowChanged(Me, New PhoneNumbersRowChangeEvent(CType(e.Row,PhoneNumbersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PhoneNumbersRowChangingEvent) Is Nothing) Then
                RaiseEvent PhoneNumbersRowChanging(Me, New PhoneNumbersRowChangeEvent(CType(e.Row,PhoneNumbersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PhoneNumbersRowDeletedEvent) Is Nothing) Then
                RaiseEvent PhoneNumbersRowDeleted(Me, New PhoneNumbersRowChangeEvent(CType(e.Row,PhoneNumbersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PhoneNumbersRowDeletingEvent) Is Nothing) Then
                RaiseEvent PhoneNumbersRowDeleting(Me, New PhoneNumbersRowChangeEvent(CType(e.Row,PhoneNumbersRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePhoneNumbersRow(ByVal row As PhoneNumbersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PhoneNumbersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AddressesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAddressID As Global.System.Data.DataColumn
        
        Private columnRecruitID As Global.System.Data.DataColumn
        
        Private columnPreferenceRank As Global.System.Data.DataColumn
        
        Private columnLine1 As Global.System.Data.DataColumn
        
        Private columnLine2 As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnAddedDate As Global.System.Data.DataColumn
        
        Private columnModifiedBy As Global.System.Data.DataColumn
        
        Private columnModifiedDate As Global.System.Data.DataColumn
        
        Private columnCountry As Global.System.Data.DataColumn
        
        Private columnCounty As Global.System.Data.DataColumn
        
        Private columnBounceDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Addresses"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecruitIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecruitID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreferenceRankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreferenceRank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Line1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLine1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Line2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLine2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BounceDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBounceDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AddressesRow
            Get
                Return CType(Me.Rows(index),AddressesRow)
            End Get
        End Property
        
        Public Event AddressesRowChanging As AddressesRowChangeEventHandler
        
        Public Event AddressesRowChanged As AddressesRowChangeEventHandler
        
        Public Event AddressesRowDeleting As AddressesRowChangeEventHandler
        
        Public Event AddressesRowDeleted As AddressesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAddressesRow(ByVal row As AddressesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAddressesRow(ByVal parentRecruitsRowByAddresses As RecruitsRow, ByVal PreferenceRank As Integer, ByVal Line1 As String, ByVal Line2 As String, ByVal City As String, ByVal State As String, ByVal Zip As String, ByVal AddedBy As String, ByVal AddedDate As Date, ByVal ModifiedBy As String, ByVal ModifiedDate As Date, ByVal Country As String, ByVal County As String, ByVal BounceDate As Date) As AddressesRow
            Dim rowAddressesRow As AddressesRow = CType(Me.NewRow,AddressesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, PreferenceRank, Line1, Line2, City, State, Zip, AddedBy, AddedDate, ModifiedBy, ModifiedDate, Country, County, BounceDate}
            If (Not (parentRecruitsRowByAddresses) Is Nothing) Then
                columnValuesArray(1) = parentRecruitsRowByAddresses(0)
            End If
            rowAddressesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAddressesRow)
            Return rowAddressesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAddressID(ByVal AddressID As Integer) As AddressesRow
            Return CType(Me.Rows.Find(New Object() {AddressID}),AddressesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AddressesDataTable = CType(MyBase.Clone,AddressesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AddressesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAddressID = MyBase.Columns("AddressID")
            Me.columnRecruitID = MyBase.Columns("RecruitID")
            Me.columnPreferenceRank = MyBase.Columns("PreferenceRank")
            Me.columnLine1 = MyBase.Columns("Line1")
            Me.columnLine2 = MyBase.Columns("Line2")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnAddedDate = MyBase.Columns("AddedDate")
            Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            Me.columnModifiedDate = MyBase.Columns("ModifiedDate")
            Me.columnCountry = MyBase.Columns("Country")
            Me.columnCounty = MyBase.Columns("County")
            Me.columnBounceDate = MyBase.Columns("BounceDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAddressID = New Global.System.Data.DataColumn("AddressID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressID)
            Me.columnRecruitID = New Global.System.Data.DataColumn("RecruitID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecruitID)
            Me.columnPreferenceRank = New Global.System.Data.DataColumn("PreferenceRank", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreferenceRank)
            Me.columnLine1 = New Global.System.Data.DataColumn("Line1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLine1)
            Me.columnLine2 = New Global.System.Data.DataColumn("Line2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLine2)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnAddedDate = New Global.System.Data.DataColumn("AddedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedDate)
            Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedBy)
            Me.columnModifiedDate = New Global.System.Data.DataColumn("ModifiedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDate)
            Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountry)
            Me.columnCounty = New Global.System.Data.DataColumn("County", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounty)
            Me.columnBounceDate = New Global.System.Data.DataColumn("BounceDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBounceDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("CHCRKey8", New Global.System.Data.DataColumn() {Me.columnAddressID}, true))
            Me.columnAddressID.AutoIncrement = true
            Me.columnAddressID.AllowDBNull = false
            Me.columnAddressID.ReadOnly = true
            Me.columnAddressID.Unique = true
            Me.columnRecruitID.AllowDBNull = false
            Me.columnLine1.AllowDBNull = false
            Me.columnCity.AllowDBNull = false
            Me.columnState.AllowDBNull = false
            Me.columnZip.AllowDBNull = false
            Me.columnAddedBy.ReadOnly = true
            Me.columnAddedDate.ReadOnly = true
            Me.columnModifiedBy.ReadOnly = true
            Me.columnModifiedDate.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAddressesRow() As AddressesRow
            Return CType(Me.NewRow,AddressesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AddressesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AddressesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AddressesRowChangedEvent) Is Nothing) Then
                RaiseEvent AddressesRowChanged(Me, New AddressesRowChangeEvent(CType(e.Row,AddressesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AddressesRowChangingEvent) Is Nothing) Then
                RaiseEvent AddressesRowChanging(Me, New AddressesRowChangeEvent(CType(e.Row,AddressesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AddressesRowDeletedEvent) Is Nothing) Then
                RaiseEvent AddressesRowDeleted(Me, New AddressesRowChangeEvent(CType(e.Row,AddressesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AddressesRowDeletingEvent) Is Nothing) Then
                RaiseEvent AddressesRowDeleting(Me, New AddressesRowChangeEvent(CType(e.Row,AddressesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAddressesRow(ByVal row As AddressesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AddressesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RecruitsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRecruitID As Global.System.Data.DataColumn
        
        Private columnAccLetter As Global.System.Data.DataColumn
        
        Private columnAccNumber As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnRandy As Global.System.Data.DataColumn
        
        Private columnBDate As Global.System.Data.DataColumn
        
        Private columnLastVistDate As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnMiddleName As Global.System.Data.DataColumn
        
        Private columnNameSuffix As Global.System.Data.DataColumn
        
        Private columnSeqNum As Global.System.Data.DataColumn
        
        Private columnRecruitProgVersion As Global.System.Data.DataColumn
        
        Private columnStudy As Global.System.Data.DataColumn
        
        Private columnStatusDate As Global.System.Data.DataColumn
        
        Private columnStatusDescription As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnAddedDate As Global.System.Data.DataColumn
        
        Private columnModifiedBy As Global.System.Data.DataColumn
        
        Private columnModifiedDate As Global.System.Data.DataColumn
        
        Private columnAccCode As Global.System.Data.DataColumn
        
        Private columnEMailAddress As Global.System.Data.DataColumn
        
        Private columnFullName As Global.System.Data.DataColumn
        
        Private columnIncentive As Global.System.Data.DataColumn
        
        Private columnPersonType As Global.System.Data.DataColumn
        
        Private columnQuitDate As Global.System.Data.DataColumn
        
        Private columnConsumNo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "Recruits"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecruitIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecruitID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AccLetterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccLetter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AccNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RandyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRandy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastVistDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastVistDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MiddleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameSuffixColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameSuffix
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SeqNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSeqNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecruitProgVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecruitProgVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AccCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EMailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEMailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FullNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFullName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IncentiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIncentive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PersonTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPersonType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuitDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuitDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsumNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsumNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RecruitsRow
            Get
                Return CType(Me.Rows(index),RecruitsRow)
            End Get
        End Property
        
        Public Event RecruitsRowChanging As RecruitsRowChangeEventHandler
        
        Public Event RecruitsRowChanged As RecruitsRowChangeEventHandler
        
        Public Event RecruitsRowDeleting As RecruitsRowChangeEventHandler
        
        Public Event RecruitsRowDeleted As RecruitsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRecruitsRow(ByVal row As RecruitsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRecruitsRow( _
                    ByVal AccLetter As String,  _
                    ByVal AccNumber As String,  _
                    ByVal Sex As String,  _
                    ByVal Randy As Double,  _
                    ByVal BDate As Date,  _
                    ByVal LastVistDate As Date,  _
                    ByVal LastName As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal NameSuffix As String,  _
                    ByVal SeqNum As Integer,  _
                    ByVal parentSamplingProgramVersionsRowBySamplingProgramVersionsRecruits As SamplingProgramVersionsRow,  _
                    ByVal parentStudiesRowByParticipants As StudiesRow,  _
                    ByVal StatusDate As Date,  _
                    ByVal StatusDescription As String,  _
                    ByVal AddedBy As String,  _
                    ByVal AddedDate As Date,  _
                    ByVal ModifiedBy As String,  _
                    ByVal ModifiedDate As Date,  _
                    ByVal AccCode As String,  _
                    ByVal EMailAddress As String,  _
                    ByVal FullName As String,  _
                    ByVal Incentive As String,  _
                    ByVal PersonType As String,  _
                    ByVal QuitDate As Date,  _
                    ByVal ConsumNo As String) As RecruitsRow
            Dim rowRecruitsRow As RecruitsRow = CType(Me.NewRow,RecruitsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, AccLetter, AccNumber, Sex, Randy, BDate, LastVistDate, LastName, FirstName, MiddleName, NameSuffix, SeqNum, Nothing, Nothing, StatusDate, StatusDescription, AddedBy, AddedDate, ModifiedBy, ModifiedDate, AccCode, EMailAddress, FullName, Incentive, PersonType, QuitDate, ConsumNo}
            If (Not (parentSamplingProgramVersionsRowBySamplingProgramVersionsRecruits) Is Nothing) Then
                columnValuesArray(12) = parentSamplingProgramVersionsRowBySamplingProgramVersionsRecruits(0)
            End If
            If (Not (parentStudiesRowByParticipants) Is Nothing) Then
                columnValuesArray(13) = parentStudiesRowByParticipants(0)
            End If
            rowRecruitsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRecruitsRow)
            Return rowRecruitsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRecruitsRow( _
                    ByVal AccLetter As String,  _
                    ByVal AccNumber As String,  _
                    ByVal Sex As String,  _
                    ByVal Randy As Double,  _
                    ByVal BDate As Date,  _
                    ByVal LastVistDate As Date,  _
                    ByVal LastName As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal NameSuffix As String,  _
                    ByVal SeqNum As Integer,  _
                    ByVal parentSamplingProgramVersionsRowBySamplingProgramVersionsRecruits As SamplingProgramVersionsRow,  _
                    ByVal parentStudiesRowByParticipants As StudiesRow,  _
                    ByVal StatusDate As Date,  _
                    ByVal StatusDescription As String,  _
                    ByVal AddedBy As String,  _
                    ByVal AddedDate As Date,  _
                    ByVal ModifiedBy As String,  _
                    ByVal ModifiedDate As Date,  _
                    ByVal AccCode As String,  _
                    ByVal EMailAddress As String,  _
                    ByVal Incentive As String,  _
                    ByVal PersonType As String,  _
                    ByVal QuitDate As Date,  _
                    ByVal ConsumNo As String) As RecruitsRow
            Dim rowRecruitsRow As RecruitsRow = CType(Me.NewRow,RecruitsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, AccLetter, AccNumber, Sex, Randy, BDate, LastVistDate, LastName, FirstName, MiddleName, NameSuffix, SeqNum, Nothing, Nothing, StatusDate, StatusDescription, AddedBy, AddedDate, ModifiedBy, ModifiedDate, AccCode, EMailAddress, Nothing, Incentive, PersonType, QuitDate, ConsumNo}
            If (Not (parentSamplingProgramVersionsRowBySamplingProgramVersionsRecruits) Is Nothing) Then
                columnValuesArray(12) = parentSamplingProgramVersionsRowBySamplingProgramVersionsRecruits(0)
            End If
            If (Not (parentStudiesRowByParticipants) Is Nothing) Then
                columnValuesArray(13) = parentStudiesRowByParticipants(0)
            End If
            rowRecruitsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRecruitsRow)
            Return rowRecruitsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRecruitID(ByVal RecruitID As Integer) As RecruitsRow
            Return CType(Me.Rows.Find(New Object() {RecruitID}),RecruitsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RecruitsDataTable = CType(MyBase.Clone,RecruitsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RecruitsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRecruitID = MyBase.Columns("RecruitID")
            Me.columnAccLetter = MyBase.Columns("AccLetter")
            Me.columnAccNumber = MyBase.Columns("AccNumber")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnRandy = MyBase.Columns("Randy")
            Me.columnBDate = MyBase.Columns("BDate")
            Me.columnLastVistDate = MyBase.Columns("LastVistDate")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnMiddleName = MyBase.Columns("MiddleName")
            Me.columnNameSuffix = MyBase.Columns("NameSuffix")
            Me.columnSeqNum = MyBase.Columns("SeqNum")
            Me.columnRecruitProgVersion = MyBase.Columns("RecruitProgVersion")
            Me.columnStudy = MyBase.Columns("Study")
            Me.columnStatusDate = MyBase.Columns("StatusDate")
            Me.columnStatusDescription = MyBase.Columns("StatusDescription")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnAddedDate = MyBase.Columns("AddedDate")
            Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            Me.columnModifiedDate = MyBase.Columns("ModifiedDate")
            Me.columnAccCode = MyBase.Columns("AccCode")
            Me.columnEMailAddress = MyBase.Columns("EMailAddress")
            Me.columnFullName = MyBase.Columns("FullName")
            Me.columnIncentive = MyBase.Columns("Incentive")
            Me.columnPersonType = MyBase.Columns("PersonType")
            Me.columnQuitDate = MyBase.Columns("QuitDate")
            Me.columnConsumNo = MyBase.Columns("ConsumNo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRecruitID = New Global.System.Data.DataColumn("RecruitID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecruitID)
            Me.columnAccLetter = New Global.System.Data.DataColumn("AccLetter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccLetter)
            Me.columnAccNumber = New Global.System.Data.DataColumn("AccNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccNumber)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnRandy = New Global.System.Data.DataColumn("Randy", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRandy)
            Me.columnBDate = New Global.System.Data.DataColumn("BDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBDate)
            Me.columnLastVistDate = New Global.System.Data.DataColumn("LastVistDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastVistDate)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New Global.System.Data.DataColumn("MiddleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleName)
            Me.columnNameSuffix = New Global.System.Data.DataColumn("NameSuffix", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameSuffix)
            Me.columnSeqNum = New Global.System.Data.DataColumn("SeqNum", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSeqNum)
            Me.columnRecruitProgVersion = New Global.System.Data.DataColumn("RecruitProgVersion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecruitProgVersion)
            Me.columnStudy = New Global.System.Data.DataColumn("Study", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudy)
            Me.columnStatusDate = New Global.System.Data.DataColumn("StatusDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusDate)
            Me.columnStatusDescription = New Global.System.Data.DataColumn("StatusDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusDescription)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnAddedDate = New Global.System.Data.DataColumn("AddedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedDate)
            Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedBy)
            Me.columnModifiedDate = New Global.System.Data.DataColumn("ModifiedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDate)
            Me.columnAccCode = New Global.System.Data.DataColumn("AccCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccCode)
            Me.columnEMailAddress = New Global.System.Data.DataColumn("EMailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEMailAddress)
            Me.columnFullName = New Global.System.Data.DataColumn("FullName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFullName)
            Me.columnIncentive = New Global.System.Data.DataColumn("Incentive", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIncentive)
            Me.columnPersonType = New Global.System.Data.DataColumn("PersonType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPersonType)
            Me.columnQuitDate = New Global.System.Data.DataColumn("QuitDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuitDate)
            Me.columnConsumNo = New Global.System.Data.DataColumn("ConsumNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsumNo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("CHCRKey9", New Global.System.Data.DataColumn() {Me.columnRecruitID}, true))
            Me.columnRecruitID.AutoIncrement = true
            Me.columnRecruitID.AllowDBNull = false
            Me.columnRecruitID.ReadOnly = true
            Me.columnRecruitID.Unique = true
            Me.columnSex.AllowDBNull = false
            Me.columnRandy.AllowDBNull = false
            Me.columnLastName.AllowDBNull = false
            Me.columnFirstName.AllowDBNull = false
            Me.columnRecruitProgVersion.AllowDBNull = false
            Me.columnStudy.AllowDBNull = false
            Me.columnAddedBy.ReadOnly = true
            Me.columnAddedDate.ReadOnly = true
            Me.columnModifiedBy.ReadOnly = true
            Me.columnModifiedDate.ReadOnly = true
            Me.columnAccCode.ReadOnly = true
            Me.columnFullName.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRecruitsRow() As RecruitsRow
            Return CType(Me.NewRow,RecruitsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RecruitsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RecruitsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.FullNameColumn.Expression = "LastName + ', ' + FirstName"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RecruitsRowChangedEvent) Is Nothing) Then
                RaiseEvent RecruitsRowChanged(Me, New RecruitsRowChangeEvent(CType(e.Row,RecruitsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RecruitsRowChangingEvent) Is Nothing) Then
                RaiseEvent RecruitsRowChanging(Me, New RecruitsRowChangeEvent(CType(e.Row,RecruitsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RecruitsRowDeletedEvent) Is Nothing) Then
                RaiseEvent RecruitsRowDeleted(Me, New RecruitsRowChangeEvent(CType(e.Row,RecruitsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RecruitsRowDeletingEvent) Is Nothing) Then
                RaiseEvent RecruitsRowDeleting(Me, New RecruitsRowChangeEvent(CType(e.Row,RecruitsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRecruitsRow(ByVal row As RecruitsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RecruitsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SamplingProgramVersionsDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRecruitProgVersion As Global.System.Data.DataColumn
        
        Private columnNotes As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SamplingProgramVersions"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecruitProgVersionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecruitProgVersion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SamplingProgramVersionsRow
            Get
                Return CType(Me.Rows(index),SamplingProgramVersionsRow)
            End Get
        End Property
        
        Public Event SamplingProgramVersionsRowChanging As SamplingProgramVersionsRowChangeEventHandler
        
        Public Event SamplingProgramVersionsRowChanged As SamplingProgramVersionsRowChangeEventHandler
        
        Public Event SamplingProgramVersionsRowDeleting As SamplingProgramVersionsRowChangeEventHandler
        
        Public Event SamplingProgramVersionsRowDeleted As SamplingProgramVersionsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSamplingProgramVersionsRow(ByVal row As SamplingProgramVersionsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSamplingProgramVersionsRow(ByVal RecruitProgVersion As String, ByVal Notes As String) As SamplingProgramVersionsRow
            Dim rowSamplingProgramVersionsRow As SamplingProgramVersionsRow = CType(Me.NewRow,SamplingProgramVersionsRow)
            Dim columnValuesArray() As Object = New Object() {RecruitProgVersion, Notes}
            rowSamplingProgramVersionsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSamplingProgramVersionsRow)
            Return rowSamplingProgramVersionsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRecruitProgVersion(ByVal RecruitProgVersion As String) As SamplingProgramVersionsRow
            Return CType(Me.Rows.Find(New Object() {RecruitProgVersion}),SamplingProgramVersionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SamplingProgramVersionsDataTable = CType(MyBase.Clone,SamplingProgramVersionsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SamplingProgramVersionsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRecruitProgVersion = MyBase.Columns("RecruitProgVersion")
            Me.columnNotes = MyBase.Columns("Notes")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRecruitProgVersion = New Global.System.Data.DataColumn("RecruitProgVersion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecruitProgVersion)
            Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotes)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("CHCRKey10", New Global.System.Data.DataColumn() {Me.columnRecruitProgVersion}, true))
            Me.columnRecruitProgVersion.AllowDBNull = false
            Me.columnRecruitProgVersion.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSamplingProgramVersionsRow() As SamplingProgramVersionsRow
            Return CType(Me.NewRow,SamplingProgramVersionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SamplingProgramVersionsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SamplingProgramVersionsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SamplingProgramVersionsRowChangedEvent) Is Nothing) Then
                RaiseEvent SamplingProgramVersionsRowChanged(Me, New SamplingProgramVersionsRowChangeEvent(CType(e.Row,SamplingProgramVersionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SamplingProgramVersionsRowChangingEvent) Is Nothing) Then
                RaiseEvent SamplingProgramVersionsRowChanging(Me, New SamplingProgramVersionsRowChangeEvent(CType(e.Row,SamplingProgramVersionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SamplingProgramVersionsRowDeletedEvent) Is Nothing) Then
                RaiseEvent SamplingProgramVersionsRowDeleted(Me, New SamplingProgramVersionsRowChangeEvent(CType(e.Row,SamplingProgramVersionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SamplingProgramVersionsRowDeletingEvent) Is Nothing) Then
                RaiseEvent SamplingProgramVersionsRowDeleting(Me, New SamplingProgramVersionsRowChangeEvent(CType(e.Row,SamplingProgramVersionsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSamplingProgramVersionsRow(ByVal row As SamplingProgramVersionsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SamplingProgramVersionsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ContactsOverviewDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columncontactdate As Global.System.Data.DataColumn
        
        Private columncontacttypedescription As Global.System.Data.DataColumn
        
        Private columnfreq As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ContactsOverview"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property contactdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontactdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property contacttypedescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontacttypedescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property freqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfreq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ContactsOverviewRow
            Get
                Return CType(Me.Rows(index),ContactsOverviewRow)
            End Get
        End Property
        
        Public Event ContactsOverviewRowChanging As ContactsOverviewRowChangeEventHandler
        
        Public Event ContactsOverviewRowChanged As ContactsOverviewRowChangeEventHandler
        
        Public Event ContactsOverviewRowDeleting As ContactsOverviewRowChangeEventHandler
        
        Public Event ContactsOverviewRowDeleted As ContactsOverviewRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddContactsOverviewRow(ByVal row As ContactsOverviewRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddContactsOverviewRow(ByVal contactdate As Date, ByVal contacttypedescription As String, ByVal freq As Integer) As ContactsOverviewRow
            Dim rowContactsOverviewRow As ContactsOverviewRow = CType(Me.NewRow,ContactsOverviewRow)
            Dim columnValuesArray() As Object = New Object() {contactdate, contacttypedescription, freq}
            rowContactsOverviewRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowContactsOverviewRow)
            Return rowContactsOverviewRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ContactsOverviewDataTable = CType(MyBase.Clone,ContactsOverviewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ContactsOverviewDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncontactdate = MyBase.Columns("contactdate")
            Me.columncontacttypedescription = MyBase.Columns("contacttypedescription")
            Me.columnfreq = MyBase.Columns("freq")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncontactdate = New Global.System.Data.DataColumn("contactdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontactdate)
            Me.columncontacttypedescription = New Global.System.Data.DataColumn("contacttypedescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontacttypedescription)
            Me.columnfreq = New Global.System.Data.DataColumn("freq", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfreq)
            Me.columncontactdate.AllowDBNull = false
            Me.columncontactdate.Caption = "Date"
            Me.columncontacttypedescription.AllowDBNull = false
            Me.columncontacttypedescription.Caption = "Type"
            Me.columnfreq.Caption = "Count"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewContactsOverviewRow() As ContactsOverviewRow
            Return CType(Me.NewRow,ContactsOverviewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ContactsOverviewRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ContactsOverviewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ContactsOverviewRowChangedEvent) Is Nothing) Then
                RaiseEvent ContactsOverviewRowChanged(Me, New ContactsOverviewRowChangeEvent(CType(e.Row,ContactsOverviewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ContactsOverviewRowChangingEvent) Is Nothing) Then
                RaiseEvent ContactsOverviewRowChanging(Me, New ContactsOverviewRowChangeEvent(CType(e.Row,ContactsOverviewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ContactsOverviewRowDeletedEvent) Is Nothing) Then
                RaiseEvent ContactsOverviewRowDeleted(Me, New ContactsOverviewRowChangeEvent(CType(e.Row,ContactsOverviewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ContactsOverviewRowDeletingEvent) Is Nothing) Then
                RaiseEvent ContactsOverviewRowDeleting(Me, New ContactsOverviewRowChangeEvent(CType(e.Row,ContactsOverviewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveContactsOverviewRow(ByVal row As ContactsOverviewRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ContactsOverviewDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class QueriedAccessCodeListDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnAccLetter As Global.System.Data.DataColumn
        
        Private columnAccNumber As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "QueriedAccessCodeList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AccLetterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccLetter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AccNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As QueriedAccessCodeListRow
            Get
                Return CType(Me.Rows(index),QueriedAccessCodeListRow)
            End Get
        End Property
        
        Public Event QueriedAccessCodeListRowChanging As QueriedAccessCodeListRowChangeEventHandler
        
        Public Event QueriedAccessCodeListRowChanged As QueriedAccessCodeListRowChangeEventHandler
        
        Public Event QueriedAccessCodeListRowDeleting As QueriedAccessCodeListRowChangeEventHandler
        
        Public Event QueriedAccessCodeListRowDeleted As QueriedAccessCodeListRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddQueriedAccessCodeListRow(ByVal row As QueriedAccessCodeListRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddQueriedAccessCodeListRow(ByVal AddedBy As String, ByVal AccLetter As String, ByVal AccNumber As String) As QueriedAccessCodeListRow
            Dim rowQueriedAccessCodeListRow As QueriedAccessCodeListRow = CType(Me.NewRow,QueriedAccessCodeListRow)
            Dim columnValuesArray() As Object = New Object() {AddedBy, AccLetter, AccNumber}
            rowQueriedAccessCodeListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowQueriedAccessCodeListRow)
            Return rowQueriedAccessCodeListRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAccLetterAccNumber(ByVal AccLetter As String, ByVal AccNumber As String) As QueriedAccessCodeListRow
            Return CType(Me.Rows.Find(New Object() {AccLetter, AccNumber}),QueriedAccessCodeListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As QueriedAccessCodeListDataTable = CType(MyBase.Clone,QueriedAccessCodeListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New QueriedAccessCodeListDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnAccLetter = MyBase.Columns("AccLetter")
            Me.columnAccNumber = MyBase.Columns("AccNumber")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnAccLetter = New Global.System.Data.DataColumn("AccLetter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccLetter)
            Me.columnAccNumber = New Global.System.Data.DataColumn("AccNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccNumber)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("QueriedAccessCodeListKey1", New Global.System.Data.DataColumn() {Me.columnAccLetter, Me.columnAccNumber}, true))
            Me.columnAccLetter.AllowDBNull = false
            Me.columnAccNumber.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewQueriedAccessCodeListRow() As QueriedAccessCodeListRow
            Return CType(Me.NewRow,QueriedAccessCodeListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New QueriedAccessCodeListRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(QueriedAccessCodeListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QueriedAccessCodeListRowChangedEvent) Is Nothing) Then
                RaiseEvent QueriedAccessCodeListRowChanged(Me, New QueriedAccessCodeListRowChangeEvent(CType(e.Row,QueriedAccessCodeListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QueriedAccessCodeListRowChangingEvent) Is Nothing) Then
                RaiseEvent QueriedAccessCodeListRowChanging(Me, New QueriedAccessCodeListRowChangeEvent(CType(e.Row,QueriedAccessCodeListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QueriedAccessCodeListRowDeletedEvent) Is Nothing) Then
                RaiseEvent QueriedAccessCodeListRowDeleted(Me, New QueriedAccessCodeListRowChangeEvent(CType(e.Row,QueriedAccessCodeListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QueriedAccessCodeListRowDeletingEvent) Is Nothing) Then
                RaiseEvent QueriedAccessCodeListRowDeleting(Me, New QueriedAccessCodeListRowChangeEvent(CType(e.Row,QueriedAccessCodeListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveQueriedAccessCodeListRow(ByVal row As QueriedAccessCodeListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "QueriedAccessCodeListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FullNamesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFullName As Global.System.Data.DataColumn
        
        Private columnRecruitID As Global.System.Data.DataColumn
        
        Private columnAccCode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FullNames"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FullNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFullName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecruitIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecruitID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AccCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAccCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FullNamesRow
            Get
                Return CType(Me.Rows(index),FullNamesRow)
            End Get
        End Property
        
        Public Event FullNamesRowChanging As FullNamesRowChangeEventHandler
        
        Public Event FullNamesRowChanged As FullNamesRowChangeEventHandler
        
        Public Event FullNamesRowDeleting As FullNamesRowChangeEventHandler
        
        Public Event FullNamesRowDeleted As FullNamesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFullNamesRow(ByVal row As FullNamesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFullNamesRow(ByVal FullName As String, ByVal RecruitID As Integer, ByVal AccCode As String) As FullNamesRow
            Dim rowFullNamesRow As FullNamesRow = CType(Me.NewRow,FullNamesRow)
            Dim columnValuesArray() As Object = New Object() {FullName, RecruitID, AccCode}
            rowFullNamesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFullNamesRow)
            Return rowFullNamesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FullNamesDataTable = CType(MyBase.Clone,FullNamesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FullNamesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFullName = MyBase.Columns("FullName")
            Me.columnRecruitID = MyBase.Columns("RecruitID")
            Me.columnAccCode = MyBase.Columns("AccCode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFullName = New Global.System.Data.DataColumn("FullName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFullName)
            Me.columnRecruitID = New Global.System.Data.DataColumn("RecruitID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecruitID)
            Me.columnAccCode = New Global.System.Data.DataColumn("AccCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAccCode)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFullNamesRow() As FullNamesRow
            Return CType(Me.NewRow,FullNamesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FullNamesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FullNamesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FullNamesRowChangedEvent) Is Nothing) Then
                RaiseEvent FullNamesRowChanged(Me, New FullNamesRowChangeEvent(CType(e.Row,FullNamesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FullNamesRowChangingEvent) Is Nothing) Then
                RaiseEvent FullNamesRowChanging(Me, New FullNamesRowChangeEvent(CType(e.Row,FullNamesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FullNamesRowDeletedEvent) Is Nothing) Then
                RaiseEvent FullNamesRowDeleted(Me, New FullNamesRowChangeEvent(CType(e.Row,FullNamesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FullNamesRowDeletingEvent) Is Nothing) Then
                RaiseEvent FullNamesRowDeleting(Me, New FullNamesRowChangeEvent(CType(e.Row,FullNamesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFullNamesRow(ByVal row As FullNamesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FullNamesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UpdatedAddressesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnAddressID As Global.System.Data.DataColumn
        
        Private columnRecruitID As Global.System.Data.DataColumn
        
        Private columnPreferenceRank As Global.System.Data.DataColumn
        
        Private columnLine1 As Global.System.Data.DataColumn
        
        Private columnLine2 As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        Private columnZip As Global.System.Data.DataColumn
        
        Private columnCountry As Global.System.Data.DataColumn
        
        Private columnCounty As Global.System.Data.DataColumn
        
        Private columnBounceDate As Global.System.Data.DataColumn
        
        Private columnAddedBy As Global.System.Data.DataColumn
        
        Private columnAddedDate As Global.System.Data.DataColumn
        
        Private columnModifiedBy As Global.System.Data.DataColumn
        
        Private columnModifiedDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UpdatedAddresses"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddressIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddressID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecruitIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecruitID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PreferenceRankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPreferenceRank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Line1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLine1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Line2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLine2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCountry
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CountyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BounceDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBounceDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AddedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UpdatedAddressesRow
            Get
                Return CType(Me.Rows(index),UpdatedAddressesRow)
            End Get
        End Property
        
        Public Event UpdatedAddressesRowChanging As UpdatedAddressesRowChangeEventHandler
        
        Public Event UpdatedAddressesRowChanged As UpdatedAddressesRowChangeEventHandler
        
        Public Event UpdatedAddressesRowDeleting As UpdatedAddressesRowChangeEventHandler
        
        Public Event UpdatedAddressesRowDeleted As UpdatedAddressesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUpdatedAddressesRow(ByVal row As UpdatedAddressesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUpdatedAddressesRow(ByVal parentRecruitsRowByUpdated_addresses As RecruitsRow, ByVal PreferenceRank As Integer, ByVal Line1 As String, ByVal Line2 As String, ByVal City As String, ByVal State As String, ByVal Zip As String, ByVal Country As String, ByVal County As String, ByVal BounceDate As Date, ByVal AddedBy As String, ByVal AddedDate As Date, ByVal ModifiedBy As String, ByVal ModifiedDate As Date) As UpdatedAddressesRow
            Dim rowUpdatedAddressesRow As UpdatedAddressesRow = CType(Me.NewRow,UpdatedAddressesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, PreferenceRank, Line1, Line2, City, State, Zip, Country, County, BounceDate, AddedBy, AddedDate, ModifiedBy, ModifiedDate}
            If (Not (parentRecruitsRowByUpdated_addresses) Is Nothing) Then
                columnValuesArray(1) = parentRecruitsRowByUpdated_addresses(0)
            End If
            rowUpdatedAddressesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUpdatedAddressesRow)
            Return rowUpdatedAddressesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAddressID(ByVal AddressID As Integer) As UpdatedAddressesRow
            Return CType(Me.Rows.Find(New Object() {AddressID}),UpdatedAddressesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UpdatedAddressesDataTable = CType(MyBase.Clone,UpdatedAddressesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UpdatedAddressesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAddressID = MyBase.Columns("AddressID")
            Me.columnRecruitID = MyBase.Columns("RecruitID")
            Me.columnPreferenceRank = MyBase.Columns("PreferenceRank")
            Me.columnLine1 = MyBase.Columns("Line1")
            Me.columnLine2 = MyBase.Columns("Line2")
            Me.columnCity = MyBase.Columns("City")
            Me.columnState = MyBase.Columns("State")
            Me.columnZip = MyBase.Columns("Zip")
            Me.columnCountry = MyBase.Columns("Country")
            Me.columnCounty = MyBase.Columns("County")
            Me.columnBounceDate = MyBase.Columns("BounceDate")
            Me.columnAddedBy = MyBase.Columns("AddedBy")
            Me.columnAddedDate = MyBase.Columns("AddedDate")
            Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            Me.columnModifiedDate = MyBase.Columns("ModifiedDate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAddressID = New Global.System.Data.DataColumn("AddressID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddressID)
            Me.columnRecruitID = New Global.System.Data.DataColumn("RecruitID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecruitID)
            Me.columnPreferenceRank = New Global.System.Data.DataColumn("PreferenceRank", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPreferenceRank)
            Me.columnLine1 = New Global.System.Data.DataColumn("Line1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLine1)
            Me.columnLine2 = New Global.System.Data.DataColumn("Line2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLine2)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnZip = New Global.System.Data.DataColumn("Zip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZip)
            Me.columnCountry = New Global.System.Data.DataColumn("Country", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCountry)
            Me.columnCounty = New Global.System.Data.DataColumn("County", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounty)
            Me.columnBounceDate = New Global.System.Data.DataColumn("BounceDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBounceDate)
            Me.columnAddedBy = New Global.System.Data.DataColumn("AddedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedBy)
            Me.columnAddedDate = New Global.System.Data.DataColumn("AddedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddedDate)
            Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedBy)
            Me.columnModifiedDate = New Global.System.Data.DataColumn("ModifiedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDate)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("CHCRKey12", New Global.System.Data.DataColumn() {Me.columnAddressID}, true))
            Me.columnAddressID.AutoIncrement = true
            Me.columnAddressID.AllowDBNull = false
            Me.columnAddressID.ReadOnly = true
            Me.columnAddressID.Unique = true
            Me.columnRecruitID.AllowDBNull = false
            Me.columnPreferenceRank.AllowDBNull = false
            Me.columnLine1.AllowDBNull = false
            Me.columnCity.AllowDBNull = false
            Me.columnState.AllowDBNull = false
            Me.columnZip.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUpdatedAddressesRow() As UpdatedAddressesRow
            Return CType(Me.NewRow,UpdatedAddressesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UpdatedAddressesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UpdatedAddressesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UpdatedAddressesRowChangedEvent) Is Nothing) Then
                RaiseEvent UpdatedAddressesRowChanged(Me, New UpdatedAddressesRowChangeEvent(CType(e.Row,UpdatedAddressesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UpdatedAddressesRowChangingEvent) Is Nothing) Then
                RaiseEvent UpdatedAddressesRowChanging(Me, New UpdatedAddressesRowChangeEvent(CType(e.Row,UpdatedAddressesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UpdatedAddressesRowDeletedEvent) Is Nothing) Then
                RaiseEvent UpdatedAddressesRowDeleted(Me, New UpdatedAddressesRowChangeEvent(CType(e.Row,UpdatedAddressesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UpdatedAddressesRowDeletingEvent) Is Nothing) Then
                RaiseEvent UpdatedAddressesRowDeleting(Me, New UpdatedAddressesRowChangeEvent(CType(e.Row,UpdatedAddressesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUpdatedAddressesRow(ByVal row As UpdatedAddressesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UpdatedAddressesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TicklerDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnToBeDone As Global.System.Data.DataColumn
        
        Private columnRequiredStatus As Global.System.Data.DataColumn
        
        Private columnDueAfterDays As Global.System.Data.DataColumn
        
        Private columnStudy As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tickler"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ToBeDoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnToBeDone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequiredStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequiredStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DueAfterDaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDueAfterDays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StudyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TicklerRow
            Get
                Return CType(Me.Rows(index),TicklerRow)
            End Get
        End Property
        
        Public Event TicklerRowChanging As TicklerRowChangeEventHandler
        
        Public Event TicklerRowChanged As TicklerRowChangeEventHandler
        
        Public Event TicklerRowDeleting As TicklerRowChangeEventHandler
        
        Public Event TicklerRowDeleted As TicklerRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTicklerRow(ByVal row As TicklerRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTicklerRow(ByVal ToBeDone As String, ByVal RequiredStatus As Integer, ByVal DueAfterDays As Integer, ByVal Study As String) As TicklerRow
            Dim rowTicklerRow As TicklerRow = CType(Me.NewRow,TicklerRow)
            Dim columnValuesArray() As Object = New Object() {ToBeDone, RequiredStatus, DueAfterDays, Study}
            rowTicklerRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTicklerRow)
            Return rowTicklerRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByToBeDoneStudy(ByVal ToBeDone As String, ByVal Study As String) As TicklerRow
            Return CType(Me.Rows.Find(New Object() {ToBeDone, Study}),TicklerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TicklerDataTable = CType(MyBase.Clone,TicklerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TicklerDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnToBeDone = MyBase.Columns("ToBeDone")
            Me.columnRequiredStatus = MyBase.Columns("RequiredStatus")
            Me.columnDueAfterDays = MyBase.Columns("DueAfterDays")
            Me.columnStudy = MyBase.Columns("Study")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnToBeDone = New Global.System.Data.DataColumn("ToBeDone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnToBeDone)
            Me.columnRequiredStatus = New Global.System.Data.DataColumn("RequiredStatus", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequiredStatus)
            Me.columnDueAfterDays = New Global.System.Data.DataColumn("DueAfterDays", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDueAfterDays)
            Me.columnStudy = New Global.System.Data.DataColumn("Study", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudy)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("TicklerKey1", New Global.System.Data.DataColumn() {Me.columnToBeDone, Me.columnStudy}, true))
            Me.columnToBeDone.AllowDBNull = false
            Me.columnRequiredStatus.AllowDBNull = false
            Me.columnDueAfterDays.AllowDBNull = false
            Me.columnStudy.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTicklerRow() As TicklerRow
            Return CType(Me.NewRow,TicklerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TicklerRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TicklerRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TicklerRowChangedEvent) Is Nothing) Then
                RaiseEvent TicklerRowChanged(Me, New TicklerRowChangeEvent(CType(e.Row,TicklerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TicklerRowChangingEvent) Is Nothing) Then
                RaiseEvent TicklerRowChanging(Me, New TicklerRowChangeEvent(CType(e.Row,TicklerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TicklerRowDeletedEvent) Is Nothing) Then
                RaiseEvent TicklerRowDeleted(Me, New TicklerRowChangeEvent(CType(e.Row,TicklerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TicklerRowDeletingEvent) Is Nothing) Then
                RaiseEvent TicklerRowDeleting(Me, New TicklerRowChangeEvent(CType(e.Row,TicklerRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTicklerRow(ByVal row As TicklerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TicklerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class incentive_card_counts_vwDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnincentive As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnnum_needed As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "incentive_card_counts_vw"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property incentiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnincentive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property num_neededColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnum_needed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As incentive_card_counts_vwRow
            Get
                Return CType(Me.Rows(index),incentive_card_counts_vwRow)
            End Get
        End Property
        
        Public Event incentive_card_counts_vwRowChanging As incentive_card_counts_vwRowChangeEventHandler
        
        Public Event incentive_card_counts_vwRowChanged As incentive_card_counts_vwRowChangeEventHandler
        
        Public Event incentive_card_counts_vwRowDeleting As incentive_card_counts_vwRowChangeEventHandler
        
        Public Event incentive_card_counts_vwRowDeleted As incentive_card_counts_vwRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addincentive_card_counts_vwRow(ByVal row As incentive_card_counts_vwRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addincentive_card_counts_vwRow(ByVal incentive As String, ByVal description As String, ByVal num_needed As Integer) As incentive_card_counts_vwRow
            Dim rowincentive_card_counts_vwRow As incentive_card_counts_vwRow = CType(Me.NewRow,incentive_card_counts_vwRow)
            Dim columnValuesArray() As Object = New Object() {incentive, description, num_needed}
            rowincentive_card_counts_vwRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowincentive_card_counts_vwRow)
            Return rowincentive_card_counts_vwRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As incentive_card_counts_vwDataTable = CType(MyBase.Clone,incentive_card_counts_vwDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New incentive_card_counts_vwDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnincentive = MyBase.Columns("incentive")
            Me.columndescription = MyBase.Columns("description")
            Me.columnnum_needed = MyBase.Columns("num_needed")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnincentive = New Global.System.Data.DataColumn("incentive", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnincentive)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnnum_needed = New Global.System.Data.DataColumn("num_needed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnum_needed)
            Me.columndescription.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newincentive_card_counts_vwRow() As incentive_card_counts_vwRow
            Return CType(Me.NewRow,incentive_card_counts_vwRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New incentive_card_counts_vwRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(incentive_card_counts_vwRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.incentive_card_counts_vwRowChangedEvent) Is Nothing) Then
                RaiseEvent incentive_card_counts_vwRowChanged(Me, New incentive_card_counts_vwRowChangeEvent(CType(e.Row,incentive_card_counts_vwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.incentive_card_counts_vwRowChangingEvent) Is Nothing) Then
                RaiseEvent incentive_card_counts_vwRowChanging(Me, New incentive_card_counts_vwRowChangeEvent(CType(e.Row,incentive_card_counts_vwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.incentive_card_counts_vwRowDeletedEvent) Is Nothing) Then
                RaiseEvent incentive_card_counts_vwRowDeleted(Me, New incentive_card_counts_vwRowChangeEvent(CType(e.Row,incentive_card_counts_vwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.incentive_card_counts_vwRowDeletingEvent) Is Nothing) Then
                RaiseEvent incentive_card_counts_vwRowDeleting(Me, New incentive_card_counts_vwRowChangeEvent(CType(e.Row,incentive_card_counts_vwRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removeincentive_card_counts_vwRow(ByVal row As incentive_card_counts_vwRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As TrackerData = New TrackerData
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "incentive_card_counts_vwDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class todo_by_type_counts_vwRow
        Inherits Global.System.Data.DataRow
        
        Private tabletodo_by_type_counts_vw As todo_by_type_counts_vwDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletodo_by_type_counts_vw = CType(Me.Table,todo_by_type_counts_vwDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tobedone() As String
            Get
                Return CType(Me(Me.tabletodo_by_type_counts_vw.tobedoneColumn),String)
            End Get
            Set
                Me(Me.tabletodo_by_type_counts_vw.tobedoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property num() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletodo_by_type_counts_vw.numColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'num' in table 'todo_by_type_counts_vw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletodo_by_type_counts_vw.numColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Wanted() As Integer
            Get
                Return CType(Me(Me.tabletodo_by_type_counts_vw.WantedColumn),Integer)
            End Get
            Set
                Me(Me.tabletodo_by_type_counts_vw.WantedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property persontype() As String
            Get
                Try 
                    Return CType(Me(Me.tabletodo_by_type_counts_vw.persontypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'persontype' in table 'todo_by_type_counts_vw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletodo_by_type_counts_vw.persontypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property study() As Integer
            Get
                Return CType(Me(Me.tabletodo_by_type_counts_vw.studyColumn),Integer)
            End Get
            Set
                Me(Me.tabletodo_by_type_counts_vw.studyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnumNull() As Boolean
            Return Me.IsNull(Me.tabletodo_by_type_counts_vw.numColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnumNull()
            Me(Me.tabletodo_by_type_counts_vw.numColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspersontypeNull() As Boolean
            Return Me.IsNull(Me.tabletodo_by_type_counts_vw.persontypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpersontypeNull()
            Me(Me.tabletodo_by_type_counts_vw.persontypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StudiesRow
        Inherits Global.System.Data.DataRow
        
        Private tableStudies As StudiesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStudies = CType(Me.Table,StudiesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Study() As Integer
            Get
                Return CType(Me(Me.tableStudies.StudyColumn),Integer)
            End Get
            Set
                Me(Me.tableStudies.StudyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudyName() As String
            Get
                Return CType(Me(Me.tableStudies.StudyNameColumn),String)
            End Get
            Set
                Me(Me.tableStudies.StudyNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRecruitsRows() As RecruitsRow()
            If (Me.Table.ChildRelations("Participants") Is Nothing) Then
                Return New RecruitsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Participants")),RecruitsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class StatusesRow
        Inherits Global.System.Data.DataRow
        
        Private tableStatuses As StatusesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableStatuses = CType(Me.Table,StatusesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Integer
            Get
                Return CType(Me(Me.tableStatuses.StatusColumn),Integer)
            End Get
            Set
                Me(Me.tableStatuses.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Study() As Integer
            Get
                Return CType(Me(Me.tableStatuses.StudyColumn),Integer)
            End Get
            Set
                Me(Me.tableStatuses.StudyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusDescription() As String
            Get
                Return CType(Me(Me.tableStatuses.StatusDescriptionColumn),String)
            End Get
            Set
                Me(Me.tableStatuses.StatusDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRecruitStatusesRows() As RecruitStatusesRow()
            If (Me.Table.ChildRelations("StatusesRecruitStatuses") Is Nothing) Then
                Return New RecruitStatusesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("StatusesRecruitStatuses")),RecruitStatusesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RecruitStatusesRow
        Inherits Global.System.Data.DataRow
        
        Private tableRecruitStatuses As RecruitStatusesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRecruitStatuses = CType(Me.Table,RecruitStatusesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecruitID() As Integer
            Get
                Return CType(Me(Me.tableRecruitStatuses.RecruitIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRecruitStatuses.RecruitIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusDate() As Date
            Get
                Return CType(Me(Me.tableRecruitStatuses.StatusDateColumn),Date)
            End Get
            Set
                Me(Me.tableRecruitStatuses.StatusDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Integer
            Get
                Return CType(Me(Me.tableRecruitStatuses.StatusColumn),Integer)
            End Get
            Set
                Me(Me.tableRecruitStatuses.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruitStatuses.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'RecruitStatuses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruitStatuses.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRecruitStatuses.AddedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedDate' in table 'RecruitStatuses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruitStatuses.AddedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruitStatuses.ModifiedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'RecruitStatuses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruitStatuses.ModifiedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRecruitStatuses.ModifiedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDate' in table 'RecruitStatuses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruitStatuses.ModifiedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecruitsRow() As RecruitsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Status History")),RecruitsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Status History"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusesRow() As StatusesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("StatusesRecruitStatuses")),StatusesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("StatusesRecruitStatuses"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableRecruitStatuses.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableRecruitStatuses.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedDateNull() As Boolean
            Return Me.IsNull(Me.tableRecruitStatuses.AddedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedDateNull()
            Me(Me.tableRecruitStatuses.AddedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableRecruitStatuses.ModifiedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedByNull()
            Me(Me.tableRecruitStatuses.ModifiedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedDateNull() As Boolean
            Return Me.IsNull(Me.tableRecruitStatuses.ModifiedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedDateNull()
            Me(Me.tableRecruitStatuses.ModifiedDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ContactTypesRow
        Inherits Global.System.Data.DataRow
        
        Private tableContactTypes As ContactTypesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableContactTypes = CType(Me.Table,ContactTypesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactType() As Integer
            Get
                Return CType(Me(Me.tableContactTypes.ContactTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableContactTypes.ContactTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactTypeDescription() As String
            Get
                Return CType(Me(Me.tableContactTypes.ContactTypeDescriptionColumn),String)
            End Get
            Set
                Me(Me.tableContactTypes.ContactTypeDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRecruitContactsRows() As RecruitContactsRow()
            If (Me.Table.ChildRelations("ContactTypesRecruitContacts") Is Nothing) Then
                Return New RecruitContactsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ContactTypesRecruitContacts")),RecruitContactsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RecruitContactsRow
        Inherits Global.System.Data.DataRow
        
        Private tableRecruitContacts As RecruitContactsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRecruitContacts = CType(Me.Table,RecruitContactsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecruitID() As Integer
            Get
                Return CType(Me(Me.tableRecruitContacts.RecruitIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRecruitContacts.RecruitIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactDate() As Date
            Get
                Return CType(Me(Me.tableRecruitContacts.ContactDateColumn),Date)
            End Get
            Set
                Me(Me.tableRecruitContacts.ContactDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Initiator() As String
            Get
                Return CType(Me(Me.tableRecruitContacts.InitiatorColumn),String)
            End Get
            Set
                Me(Me.tableRecruitContacts.InitiatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Result() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruitContacts.ResultColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Result' in table 'RecruitContacts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruitContacts.ResultColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruitContacts.NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'RecruitContacts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruitContacts.NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactType() As Integer
            Get
                Return CType(Me(Me.tableRecruitContacts.ContactTypeColumn),Integer)
            End Get
            Set
                Me(Me.tableRecruitContacts.ContactTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruitContacts.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'RecruitContacts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruitContacts.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRecruitContacts.AddedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedDate' in table 'RecruitContacts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruitContacts.AddedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruitContacts.ModifiedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'RecruitContacts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruitContacts.ModifiedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRecruitContacts.ModifiedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDate' in table 'RecruitContacts' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruitContacts.ModifiedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecruitsRow() As RecruitsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Contacts")),RecruitsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Contacts"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactTypesRow() As ContactTypesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ContactTypesRecruitContacts")),ContactTypesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ContactTypesRecruitContacts"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResultNull() As Boolean
            Return Me.IsNull(Me.tableRecruitContacts.ResultColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResultNull()
            Me(Me.tableRecruitContacts.ResultColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableRecruitContacts.NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotesNull()
            Me(Me.tableRecruitContacts.NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableRecruitContacts.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableRecruitContacts.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedDateNull() As Boolean
            Return Me.IsNull(Me.tableRecruitContacts.AddedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedDateNull()
            Me(Me.tableRecruitContacts.AddedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableRecruitContacts.ModifiedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedByNull()
            Me(Me.tableRecruitContacts.ModifiedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedDateNull() As Boolean
            Return Me.IsNull(Me.tableRecruitContacts.ModifiedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedDateNull()
            Me(Me.tableRecruitContacts.ModifiedDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PhoneNumberTypesRow
        Inherits Global.System.Data.DataRow
        
        Private tablePhoneNumberTypes As PhoneNumberTypesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePhoneNumberTypes = CType(Me.Table,PhoneNumberTypesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Return CType(Me(Me.tablePhoneNumberTypes.TypeColumn),String)
            End Get
            Set
                Me(Me.tablePhoneNumberTypes.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPhoneNumbersRows() As PhoneNumbersRow()
            If (Me.Table.ChildRelations("PhoneNumberTypesPhoneNumbers") Is Nothing) Then
                Return New PhoneNumbersRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PhoneNumberTypesPhoneNumbers")),PhoneNumbersRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PhoneNumbersRow
        Inherits Global.System.Data.DataRow
        
        Private tablePhoneNumbers As PhoneNumbersDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePhoneNumbers = CType(Me.Table,PhoneNumbersDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecruitID() As Integer
            Get
                Return CType(Me(Me.tablePhoneNumbers.RecruitIDColumn),Integer)
            End Get
            Set
                Me(Me.tablePhoneNumbers.RecruitIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AreaCode() As String
            Get
                Return CType(Me(Me.tablePhoneNumbers.AreaCodeColumn),String)
            End Get
            Set
                Me(Me.tablePhoneNumbers.AreaCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhoneNumber() As String
            Get
                Return CType(Me(Me.tablePhoneNumbers.PhoneNumberColumn),String)
            End Get
            Set
                Me(Me.tablePhoneNumbers.PhoneNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Return CType(Me(Me.tablePhoneNumbers.TypeColumn),String)
            End Get
            Set
                Me(Me.tablePhoneNumbers.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Source() As String
            Get
                Return CType(Me(Me.tablePhoneNumbers.SourceColumn),String)
            End Get
            Set
                Me(Me.tablePhoneNumbers.SourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Extension() As String
            Get
                Try 
                    Return CType(Me(Me.tablePhoneNumbers.ExtensionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Extension' in table 'PhoneNumbers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhoneNumbers.ExtensionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tablePhoneNumbers.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'PhoneNumbers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhoneNumbers.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePhoneNumbers.AddedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedDate' in table 'PhoneNumbers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhoneNumbers.AddedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tablePhoneNumbers.ModifiedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'PhoneNumbers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhoneNumbers.ModifiedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePhoneNumbers.ModifiedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDate' in table 'PhoneNumbers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhoneNumbers.ModifiedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecruitsRow() As RecruitsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Phone Numbers")),RecruitsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Phone Numbers"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhoneNumberTypesRow() As PhoneNumberTypesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PhoneNumberTypesPhoneNumbers")),PhoneNumberTypesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PhoneNumberTypesPhoneNumbers"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExtensionNull() As Boolean
            Return Me.IsNull(Me.tablePhoneNumbers.ExtensionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExtensionNull()
            Me(Me.tablePhoneNumbers.ExtensionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tablePhoneNumbers.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tablePhoneNumbers.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedDateNull() As Boolean
            Return Me.IsNull(Me.tablePhoneNumbers.AddedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedDateNull()
            Me(Me.tablePhoneNumbers.AddedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tablePhoneNumbers.ModifiedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedByNull()
            Me(Me.tablePhoneNumbers.ModifiedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedDateNull() As Boolean
            Return Me.IsNull(Me.tablePhoneNumbers.ModifiedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedDateNull()
            Me(Me.tablePhoneNumbers.ModifiedDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AddressesRow
        Inherits Global.System.Data.DataRow
        
        Private tableAddresses As AddressesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAddresses = CType(Me.Table,AddressesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressID() As Integer
            Get
                Return CType(Me(Me.tableAddresses.AddressIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAddresses.AddressIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecruitID() As Integer
            Get
                Return CType(Me(Me.tableAddresses.RecruitIDColumn),Integer)
            End Get
            Set
                Me(Me.tableAddresses.RecruitIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreferenceRank() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAddresses.PreferenceRankColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PreferenceRank' in table 'Addresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAddresses.PreferenceRankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Line1() As String
            Get
                Return CType(Me(Me.tableAddresses.Line1Column),String)
            End Get
            Set
                Me(Me.tableAddresses.Line1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Line2() As String
            Get
                Try 
                    Return CType(Me(Me.tableAddresses.Line2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Line2' in table 'Addresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAddresses.Line2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tableAddresses.CityColumn),String)
            End Get
            Set
                Me(Me.tableAddresses.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Return CType(Me(Me.tableAddresses.StateColumn),String)
            End Get
            Set
                Me(Me.tableAddresses.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Return CType(Me(Me.tableAddresses.ZipColumn),String)
            End Get
            Set
                Me(Me.tableAddresses.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableAddresses.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'Addresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAddresses.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAddresses.AddedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedDate' in table 'Addresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAddresses.AddedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableAddresses.ModifiedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'Addresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAddresses.ModifiedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAddresses.ModifiedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDate' in table 'Addresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAddresses.ModifiedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Country() As String
            Get
                Try 
                    Return CType(Me(Me.tableAddresses.CountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'Addresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAddresses.CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property County() As String
            Get
                Try 
                    Return CType(Me(Me.tableAddresses.CountyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'County' in table 'Addresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAddresses.CountyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BounceDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAddresses.BounceDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BounceDate' in table 'Addresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAddresses.BounceDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecruitsRow() As RecruitsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Addresses")),RecruitsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Addresses"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPreferenceRankNull() As Boolean
            Return Me.IsNull(Me.tableAddresses.PreferenceRankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPreferenceRankNull()
            Me(Me.tableAddresses.PreferenceRankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLine2Null() As Boolean
            Return Me.IsNull(Me.tableAddresses.Line2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLine2Null()
            Me(Me.tableAddresses.Line2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableAddresses.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableAddresses.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedDateNull() As Boolean
            Return Me.IsNull(Me.tableAddresses.AddedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedDateNull()
            Me(Me.tableAddresses.AddedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableAddresses.ModifiedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedByNull()
            Me(Me.tableAddresses.ModifiedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedDateNull() As Boolean
            Return Me.IsNull(Me.tableAddresses.ModifiedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedDateNull()
            Me(Me.tableAddresses.ModifiedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCountryNull() As Boolean
            Return Me.IsNull(Me.tableAddresses.CountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCountryNull()
            Me(Me.tableAddresses.CountryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCountyNull() As Boolean
            Return Me.IsNull(Me.tableAddresses.CountyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCountyNull()
            Me(Me.tableAddresses.CountyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBounceDateNull() As Boolean
            Return Me.IsNull(Me.tableAddresses.BounceDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBounceDateNull()
            Me(Me.tableAddresses.BounceDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RecruitsRow
        Inherits Global.System.Data.DataRow
        
        Private tableRecruits As RecruitsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRecruits = CType(Me.Table,RecruitsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecruitID() As Integer
            Get
                Return CType(Me(Me.tableRecruits.RecruitIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRecruits.RecruitIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AccLetter() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.AccLetterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccLetter' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.AccLetterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AccNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.AccNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccNumber' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.AccNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tableRecruits.SexColumn),String)
            End Get
            Set
                Me(Me.tableRecruits.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Randy() As Double
            Get
                Return CType(Me(Me.tableRecruits.RandyColumn),Double)
            End Get
            Set
                Me(Me.tableRecruits.RandyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.BDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BDate' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.BDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastVistDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.LastVistDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastVistDate' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.LastVistDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Return CType(Me(Me.tableRecruits.LastNameColumn),String)
            End Get
            Set
                Me(Me.tableRecruits.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Return CType(Me(Me.tableRecruits.FirstNameColumn),String)
            End Get
            Set
                Me(Me.tableRecruits.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiddleName() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.MiddleNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleName' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.MiddleNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameSuffix() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.NameSuffixColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NameSuffix' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.NameSuffixColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SeqNum() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.SeqNumColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SeqNum' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.SeqNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecruitProgVersion() As String
            Get
                Return CType(Me(Me.tableRecruits.RecruitProgVersionColumn),String)
            End Get
            Set
                Me(Me.tableRecruits.RecruitProgVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Study() As Integer
            Get
                Return CType(Me(Me.tableRecruits.StudyColumn),Integer)
            End Get
            Set
                Me(Me.tableRecruits.StudyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.StatusDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatusDate' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.StatusDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.StatusDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatusDescription' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.StatusDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.AddedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedDate' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.AddedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.ModifiedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.ModifiedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.ModifiedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDate' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.ModifiedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AccCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.AccCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccCode' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.AccCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EMailAddress() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.EMailAddressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EMailAddress' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.EMailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FullName() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.FullNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FullName' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.FullNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Incentive() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.IncentiveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Incentive' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.IncentiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PersonType() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.PersonTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PersonType' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.PersonTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QuitDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.QuitDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QuitDate' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.QuitDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsumNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableRecruits.ConsumNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsumNo' in table 'Recruits' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRecruits.ConsumNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SamplingProgramVersionsRow() As SamplingProgramVersionsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SamplingProgramVersionsRecruits")),SamplingProgramVersionsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SamplingProgramVersionsRecruits"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StudiesRow() As StudiesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Participants")),StudiesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Participants"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAccLetterNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.AccLetterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAccLetterNull()
            Me(Me.tableRecruits.AccLetterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAccNumberNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.AccNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAccNumberNull()
            Me(Me.tableRecruits.AccNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBDateNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.BDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBDateNull()
            Me(Me.tableRecruits.BDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastVistDateNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.LastVistDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastVistDateNull()
            Me(Me.tableRecruits.LastVistDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.MiddleNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMiddleNameNull()
            Me(Me.tableRecruits.MiddleNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameSuffixNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.NameSuffixColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameSuffixNull()
            Me(Me.tableRecruits.NameSuffixColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSeqNumNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.SeqNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSeqNumNull()
            Me(Me.tableRecruits.SeqNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusDateNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.StatusDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusDateNull()
            Me(Me.tableRecruits.StatusDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.StatusDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusDescriptionNull()
            Me(Me.tableRecruits.StatusDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableRecruits.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedDateNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.AddedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedDateNull()
            Me(Me.tableRecruits.AddedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.ModifiedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedByNull()
            Me(Me.tableRecruits.ModifiedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedDateNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.ModifiedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedDateNull()
            Me(Me.tableRecruits.ModifiedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAccCodeNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.AccCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAccCodeNull()
            Me(Me.tableRecruits.AccCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEMailAddressNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.EMailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEMailAddressNull()
            Me(Me.tableRecruits.EMailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFullNameNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.FullNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFullNameNull()
            Me(Me.tableRecruits.FullNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIncentiveNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.IncentiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIncentiveNull()
            Me(Me.tableRecruits.IncentiveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPersonTypeNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.PersonTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPersonTypeNull()
            Me(Me.tableRecruits.PersonTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuitDateNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.QuitDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuitDateNull()
            Me(Me.tableRecruits.QuitDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsumNoNull() As Boolean
            Return Me.IsNull(Me.tableRecruits.ConsumNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsumNoNull()
            Me(Me.tableRecruits.ConsumNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetUpdatedAddressesRows() As UpdatedAddressesRow()
            If (Me.Table.ChildRelations("Updated addresses") Is Nothing) Then
                Return New UpdatedAddressesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Updated addresses")),UpdatedAddressesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetAddressesRows() As AddressesRow()
            If (Me.Table.ChildRelations("Addresses") Is Nothing) Then
                Return New AddressesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Addresses")),AddressesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPhoneNumbersRows() As PhoneNumbersRow()
            If (Me.Table.ChildRelations("Phone Numbers") Is Nothing) Then
                Return New PhoneNumbersRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Phone Numbers")),PhoneNumbersRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRecruitContactsRows() As RecruitContactsRow()
            If (Me.Table.ChildRelations("Contacts") Is Nothing) Then
                Return New RecruitContactsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Contacts")),RecruitContactsRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRecruitStatusesRows() As RecruitStatusesRow()
            If (Me.Table.ChildRelations("Status History") Is Nothing) Then
                Return New RecruitStatusesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Status History")),RecruitStatusesRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SamplingProgramVersionsRow
        Inherits Global.System.Data.DataRow
        
        Private tableSamplingProgramVersions As SamplingProgramVersionsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSamplingProgramVersions = CType(Me.Table,SamplingProgramVersionsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecruitProgVersion() As String
            Get
                Return CType(Me(Me.tableSamplingProgramVersions.RecruitProgVersionColumn),String)
            End Get
            Set
                Me(Me.tableSamplingProgramVersions.RecruitProgVersionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tableSamplingProgramVersions.NotesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'SamplingProgramVersions' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSamplingProgramVersions.NotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableSamplingProgramVersions.NotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotesNull()
            Me(Me.tableSamplingProgramVersions.NotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRecruitsRows() As RecruitsRow()
            If (Me.Table.ChildRelations("SamplingProgramVersionsRecruits") Is Nothing) Then
                Return New RecruitsRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SamplingProgramVersionsRecruits")),RecruitsRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ContactsOverviewRow
        Inherits Global.System.Data.DataRow
        
        Private tableContactsOverview As ContactsOverviewDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableContactsOverview = CType(Me.Table,ContactsOverviewDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property contactdate() As Date
            Get
                Return CType(Me(Me.tableContactsOverview.contactdateColumn),Date)
            End Get
            Set
                Me(Me.tableContactsOverview.contactdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property contacttypedescription() As String
            Get
                Return CType(Me(Me.tableContactsOverview.contacttypedescriptionColumn),String)
            End Get
            Set
                Me(Me.tableContactsOverview.contacttypedescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property freq() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableContactsOverview.freqColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'freq' in table 'ContactsOverview' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableContactsOverview.freqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfreqNull() As Boolean
            Return Me.IsNull(Me.tableContactsOverview.freqColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfreqNull()
            Me(Me.tableContactsOverview.freqColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class QueriedAccessCodeListRow
        Inherits Global.System.Data.DataRow
        
        Private tableQueriedAccessCodeList As QueriedAccessCodeListDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableQueriedAccessCodeList = CType(Me.Table,QueriedAccessCodeListDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                If Me.IsAddedByNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableQueriedAccessCodeList.AddedByColumn),String)
                End If
            End Get
            Set
                Me(Me.tableQueriedAccessCodeList.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AccLetter() As String
            Get
                Return CType(Me(Me.tableQueriedAccessCodeList.AccLetterColumn),String)
            End Get
            Set
                Me(Me.tableQueriedAccessCodeList.AccLetterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AccNumber() As String
            Get
                Return CType(Me(Me.tableQueriedAccessCodeList.AccNumberColumn),String)
            End Get
            Set
                Me(Me.tableQueriedAccessCodeList.AccNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableQueriedAccessCodeList.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableQueriedAccessCodeList.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FullNamesRow
        Inherits Global.System.Data.DataRow
        
        Private tableFullNames As FullNamesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFullNames = CType(Me.Table,FullNamesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FullName() As String
            Get
                Try 
                    Return CType(Me(Me.tableFullNames.FullNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FullName' in table 'FullNames' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFullNames.FullNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecruitID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFullNames.RecruitIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RecruitID' in table 'FullNames' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFullNames.RecruitIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AccCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableFullNames.AccCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AccCode' in table 'FullNames' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFullNames.AccCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFullNameNull() As Boolean
            Return Me.IsNull(Me.tableFullNames.FullNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFullNameNull()
            Me(Me.tableFullNames.FullNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRecruitIDNull() As Boolean
            Return Me.IsNull(Me.tableFullNames.RecruitIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRecruitIDNull()
            Me(Me.tableFullNames.RecruitIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAccCodeNull() As Boolean
            Return Me.IsNull(Me.tableFullNames.AccCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAccCodeNull()
            Me(Me.tableFullNames.AccCodeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UpdatedAddressesRow
        Inherits Global.System.Data.DataRow
        
        Private tableUpdatedAddresses As UpdatedAddressesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUpdatedAddresses = CType(Me.Table,UpdatedAddressesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddressID() As Integer
            Get
                Return CType(Me(Me.tableUpdatedAddresses.AddressIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUpdatedAddresses.AddressIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecruitID() As Integer
            Get
                Return CType(Me(Me.tableUpdatedAddresses.RecruitIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUpdatedAddresses.RecruitIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PreferenceRank() As Integer
            Get
                Return CType(Me(Me.tableUpdatedAddresses.PreferenceRankColumn),Integer)
            End Get
            Set
                Me(Me.tableUpdatedAddresses.PreferenceRankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Line1() As String
            Get
                Return CType(Me(Me.tableUpdatedAddresses.Line1Column),String)
            End Get
            Set
                Me(Me.tableUpdatedAddresses.Line1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Line2() As String
            Get
                Try 
                    Return CType(Me(Me.tableUpdatedAddresses.Line2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Line2' in table 'UpdatedAddresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUpdatedAddresses.Line2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tableUpdatedAddresses.CityColumn),String)
            End Get
            Set
                Me(Me.tableUpdatedAddresses.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Return CType(Me(Me.tableUpdatedAddresses.StateColumn),String)
            End Get
            Set
                Me(Me.tableUpdatedAddresses.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Zip() As String
            Get
                Return CType(Me(Me.tableUpdatedAddresses.ZipColumn),String)
            End Get
            Set
                Me(Me.tableUpdatedAddresses.ZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Country() As String
            Get
                Try 
                    Return CType(Me(Me.tableUpdatedAddresses.CountryColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Country' in table 'UpdatedAddresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUpdatedAddresses.CountryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property County() As String
            Get
                Try 
                    Return CType(Me(Me.tableUpdatedAddresses.CountyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'County' in table 'UpdatedAddresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUpdatedAddresses.CountyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BounceDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUpdatedAddresses.BounceDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BounceDate' in table 'UpdatedAddresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUpdatedAddresses.BounceDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableUpdatedAddresses.AddedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedBy' in table 'UpdatedAddresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUpdatedAddresses.AddedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AddedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUpdatedAddresses.AddedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AddedDate' in table 'UpdatedAddresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUpdatedAddresses.AddedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedBy() As String
            Get
                Try 
                    Return CType(Me(Me.tableUpdatedAddresses.ModifiedByColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'UpdatedAddresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUpdatedAddresses.ModifiedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUpdatedAddresses.ModifiedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDate' in table 'UpdatedAddresses' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUpdatedAddresses.ModifiedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecruitsRow() As RecruitsRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Updated addresses")),RecruitsRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Updated addresses"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLine2Null() As Boolean
            Return Me.IsNull(Me.tableUpdatedAddresses.Line2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLine2Null()
            Me(Me.tableUpdatedAddresses.Line2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCountryNull() As Boolean
            Return Me.IsNull(Me.tableUpdatedAddresses.CountryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCountryNull()
            Me(Me.tableUpdatedAddresses.CountryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCountyNull() As Boolean
            Return Me.IsNull(Me.tableUpdatedAddresses.CountyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCountyNull()
            Me(Me.tableUpdatedAddresses.CountyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBounceDateNull() As Boolean
            Return Me.IsNull(Me.tableUpdatedAddresses.BounceDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBounceDateNull()
            Me(Me.tableUpdatedAddresses.BounceDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedByNull() As Boolean
            Return Me.IsNull(Me.tableUpdatedAddresses.AddedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedByNull()
            Me(Me.tableUpdatedAddresses.AddedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAddedDateNull() As Boolean
            Return Me.IsNull(Me.tableUpdatedAddresses.AddedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAddedDateNull()
            Me(Me.tableUpdatedAddresses.AddedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedByNull() As Boolean
            Return Me.IsNull(Me.tableUpdatedAddresses.ModifiedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedByNull()
            Me(Me.tableUpdatedAddresses.ModifiedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedDateNull() As Boolean
            Return Me.IsNull(Me.tableUpdatedAddresses.ModifiedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedDateNull()
            Me(Me.tableUpdatedAddresses.ModifiedDateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TicklerRow
        Inherits Global.System.Data.DataRow
        
        Private tableTickler As TicklerDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTickler = CType(Me.Table,TicklerDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ToBeDone() As String
            Get
                Return CType(Me(Me.tableTickler.ToBeDoneColumn),String)
            End Get
            Set
                Me(Me.tableTickler.ToBeDoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequiredStatus() As Integer
            Get
                Return CType(Me(Me.tableTickler.RequiredStatusColumn),Integer)
            End Get
            Set
                Me(Me.tableTickler.RequiredStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DueAfterDays() As Integer
            Get
                Return CType(Me(Me.tableTickler.DueAfterDaysColumn),Integer)
            End Get
            Set
                Me(Me.tableTickler.DueAfterDaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Study() As String
            Get
                Return CType(Me(Me.tableTickler.StudyColumn),String)
            End Get
            Set
                Me(Me.tableTickler.StudyColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class incentive_card_counts_vwRow
        Inherits Global.System.Data.DataRow
        
        Private tableincentive_card_counts_vw As incentive_card_counts_vwDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableincentive_card_counts_vw = CType(Me.Table,incentive_card_counts_vwDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property incentive() As String
            Get
                Try 
                    Return CType(Me(Me.tableincentive_card_counts_vw.incentiveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'incentive' in table 'incentive_card_counts_vw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableincentive_card_counts_vw.incentiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Return CType(Me(Me.tableincentive_card_counts_vw.descriptionColumn),String)
            End Get
            Set
                Me(Me.tableincentive_card_counts_vw.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property num_needed() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableincentive_card_counts_vw.num_neededColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'num_needed' in table 'incentive_card_counts_vw' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableincentive_card_counts_vw.num_neededColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsincentiveNull() As Boolean
            Return Me.IsNull(Me.tableincentive_card_counts_vw.incentiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetincentiveNull()
            Me(Me.tableincentive_card_counts_vw.incentiveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isnum_neededNull() As Boolean
            Return Me.IsNull(Me.tableincentive_card_counts_vw.num_neededColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setnum_neededNull()
            Me(Me.tableincentive_card_counts_vw.num_neededColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class todo_by_type_counts_vwRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As todo_by_type_counts_vwRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As todo_by_type_counts_vwRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As todo_by_type_counts_vwRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StudiesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StudiesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StudiesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StudiesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class StatusesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As StatusesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As StatusesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As StatusesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RecruitStatusesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RecruitStatusesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RecruitStatusesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RecruitStatusesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ContactTypesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ContactTypesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ContactTypesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ContactTypesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RecruitContactsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RecruitContactsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RecruitContactsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RecruitContactsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PhoneNumberTypesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PhoneNumberTypesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PhoneNumberTypesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PhoneNumberTypesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PhoneNumbersRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PhoneNumbersRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PhoneNumbersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PhoneNumbersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AddressesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AddressesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AddressesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AddressesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RecruitsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RecruitsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RecruitsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RecruitsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SamplingProgramVersionsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SamplingProgramVersionsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SamplingProgramVersionsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SamplingProgramVersionsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ContactsOverviewRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ContactsOverviewRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ContactsOverviewRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ContactsOverviewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class QueriedAccessCodeListRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As QueriedAccessCodeListRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As QueriedAccessCodeListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As QueriedAccessCodeListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FullNamesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FullNamesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FullNamesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FullNamesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UpdatedAddressesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UpdatedAddressesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UpdatedAddressesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UpdatedAddressesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TicklerRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TicklerRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TicklerRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TicklerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class incentive_card_counts_vwRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As incentive_card_counts_vwRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As incentive_card_counts_vwRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As incentive_card_counts_vwRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace TrackerDataTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class todo_by_type_counts_vwTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "todo_by_type_counts_vw"
            tableMapping.ColumnMappings.Add("tobedone", "tobedone")
            tableMapping.ColumnMappings.Add("num", "num")
            tableMapping.ColumnMappings.Add("persontype", "persontype")
            tableMapping.ColumnMappings.Add("study", "study")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
      Me._connection.ConnectionString = Global.Tracker.My.MySettings.Default.ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "select study, tobedone, coalesce(persontype, 'N/A') as persontype, count(*) as nu"& _ 
                "m"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"from todo_by_type_vw"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where study = @study"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"group by study, tobedone, persont"& _ 
                "ype"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@study", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "Study", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As TrackerData.todo_by_type_counts_vwDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal study As Integer) As TrackerData.todo_by_type_counts_vwDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(study,Integer)
            Dim dataTable As TrackerData.todo_by_type_counts_vwDataTable = New TrackerData.todo_by_type_counts_vwDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
